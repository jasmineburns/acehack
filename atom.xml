<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <title>AceHack</title>
    <link href="https://sakshamsharma.com/atom.xml" rel="self" />
    <link href="https://sakshamsharma.com" />
    <id>https://sakshamsharma.com/atom.xml</id>
    <author>
        <name>Saksham Sharma</name>
        <email>saksham0808@gmail.com</email>
    </author>
    <updated>2016-12-26T00:00:00Z</updated>
    <entry>
    <title>Limiting 'likes' sent anonymously - Part 3</title>
    <link href="https://sakshamsharma.com/2016/12/puppy3/index.html" />
    <id>https://sakshamsharma.com/2016/12/puppy3/index.html</id>
    <published>2016-12-26T00:00:00Z</published>
    <updated>2016-12-26T00:00:00Z</updated>
    <summary type="html"><![CDATA[<div>
    <!-- <script type="text/x-mathjax-config"> -->
<!-- MathJax.Hub.Config({ -->
<!--   tex2jax: {inlineMath: [['$','$'], ['\\(','\\)']]} -->
<!-- }); -->
<!-- </script> -->
<!-- <script type="text/javascript" async -->
<!--   src="https://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-MML-AM_CHTML"> -->
<!-- </script> -->
<h3 id="recap">Recap</h3>
<p>For those who haven’t read the previous posts <a href="/2016/10/puppy1/">part 1</a> and <a href="/2016/11/puppy2/">part 2</a>, this is a challenge which came up while trying to develop a secure version of a platform called <em>Puppy Love</em>. The introduction and the algorithmic challenge, taken from the previous 2 articles:</p>
<!--more-->
<p>The queerly named <em>Puppy Love</em> platform has been running in my university since 2014, meant to help shy nerds meet their crush, made my the Programming Club (of which, I happen to be the current coordinator). The platform opens 1 week prior to the Valentine’s Day every year, and let’s people choose up to 4 of their crushes, encrypting their choices with their password. At the stroke of the midnight hour, everyone logs back, and their choices are decrypted, and are then matched to other people’s choices. Only the people who matched are informed about it. If your <em>love</em> was unrequited (the other person didn’t like you), you will not get to know. More importantly, if you did not like the other person, you would not know if that person liked you or not.</p>
<h3 id="limiting-your-likes-the-challenge">Limiting your likes: The challenge</h3>
<p>In part 2, we ensured that the server would not get to know the individual choices of the users, and would only know if both of the parties <em>matched</em>. There still exists, an issue with this. Since the server has no idea about your choices, it cannot prevent you from sending a <em>like</em> to everyone you know. Theoretically, you could send one to everyone, and basically find out who likes you. Of course, this comes with the additional baggage of having to explain to the person that you actually cheated and do not like them back.</p>
<h3 id="algorithm">Algorithm</h3>
<p>Here is a possible solution to this challenge. To explain that, I shall go over the current algorithm (taken from Part 2):</p>
<ul>
<li>Both parties have shared secret values A and B. These are not known to Eve by virtue of public key encryption.</li>
<li>Parties agree to this protocol:</li>
<li>Alice sends value <code>a = A</code> to Eve if she likes Bob.</li>
<li>Alice sends value <code>a = random</code> to Eve if she does not like Bob.</li>
<li>Bob sends value <code>b = B</code> to Eve if he likes Alice.</li>
<li>Bob sends value <code>b = random</code> to Eve if he does not like Alice.</li>
<li>Eve receives <code>a</code> and <code>b</code>. She stores <code>hash(a*b)</code> as result.</li>
<li>Alice and Bob manually compute <code>hash(A * B)</code>, and send it to server (server can verify malicious behavior if they don’t match)</li>
<li>It is a match only if the result and the expected value by both parties are the same.</li>
</ul>
<p>Note here, that the server shall not find out more than one of A, B if the two parties did not match. But if they match, this would be a cue for the server that there was a match. Now, this is a good point to ensure that both the users did not send more than 4 likes, and this match, indeed, was expected. Here is a sketch of how this could be done:</p>
<ul>
<li>Once you finalize your choices, you need to inform the server about them in a way that it cannot find out unless that choice actually matched.</li>
<li>If your likes are <em>m1</em>, <em>m2</em>, <em>m3</em> and <em>m4</em>, assume that the negotiated values <code>A</code> and <code>B</code> are: <em>A1</em>, <em>B1</em> and so on.</li>
<li>You send the value <code>AES_enc('m1')</code> encrypted with a password <code>A1-password-B1</code> or some other function of both <code>A1</code> and <code>B1</code>.</li>
<li>The server shall accept only 4 of such terms.</li>
<li>When the server detects a match, it shall look up in the list of terms you sent, and try decrypting them, to ensure that this particular match was among the 4 you had expected. It should ideally find exactly one term which gets decrypted.</li>
<li>If there is a match which was not intended, it is simply dropped.</li>
</ul>
<p>This way, only 4 of your likes can actually result in matches. The server still cannot detect your choices. Profit <code>:)</code></p>
</div>

<script src="/js/fb.js"></script>
<div
    class="fb-like"
    data-share="true"
    data-width="450"
    data-show-faces="true">
</div>

<script id="dsq-count-scr" src="//acehack.disqus.com/count.js" async></script>

<div id="disqus_thread"></div>
<script>
 // For debugging
 var disqus_developer = 1;
 var disqus_shortname = 'acehack';
 var disqus_config = function () {
     this.page.url = 'http://acehack.org/2016/12/puppy3/index.html';
     this.page.identifier = 'puppy-3';
     this.page.title = 'Limiting 'likes' sent anonymously - Part 3';
 };
 (function() {
     var dsq = document.createElement('script'); dsq.type = 'text/javascript'; dsq.async = true;
     dsq.src = '//' + disqus_shortname + '.disqus.com/embed.js';
     (document.getElementsByTagName('head')[0] || document.getElementsByTagName('body')[0]).appendChild(dsq);
 })();
 (function () {
     var s = document.createElement('script'); s.async = true;
     s.type = 'text/javascript';
     s.src = '//' + disqus_shortname + '.disqus.com/count.js';
     (document.getElementsByTagName('HEAD')[0] || document.getElementsByTagName('BODY')[0]).appendChild(s);
 }());
</script>
<noscript>Please enable JavaScript to view the <a href="https://disqus.com/?ref_noscript" rel="nofollow">comments powered by Disqus.</a></noscript>
]]></summary>
</entry>
<entry>
    <title>My internship interview saga</title>
    <link href="https://sakshamsharma.com/2016/12/internsaga/index.html" />
    <id>https://sakshamsharma.com/2016/12/internsaga/index.html</id>
    <published>2016-12-21T00:00:00Z</published>
    <updated>2016-12-21T00:00:00Z</updated>
    <summary type="html"><![CDATA[<div>
    <p>So, after months of worrying, I had finally landed an internship position at Google Seattle, in the team of my choice. But before I could stop being lazy and sign the offer letter, something happened which made every remaining day of that offer letter an exercise in surviving confusion. But before that, let’s go to the start.</p>
<p>Disclaimer:</p>
<blockquote>
<p>This article is going to be long, and flaky. I wrote this to clear up my brain, the very day this whacky process finished. Putting it up in case it can help someone.</p>
</blockquote>
<p><br> Disclaimer 2:</p>
<blockquote>
<p>There might be some parts in this which seem accusatory. I tried my best to simply state the facts. If something seems wrong, please understand that it was not intended.</p>
</blockquote>
<h3 id="campus-internships">Campus internships</h3>
<p>I had landed back from Germany after my summer internship, and faced the immediate prospect of facing the upcoming campus internship season, where you have to sit for a bazillion interviews in a single day. I had this extra pressure of so-called ‘living up to my own expectations’. I had liked my internship in Germany, and would at least want something as good. But being underprepared as I was, and hoping that I could later prepare, and sit for off-campus internships abroad, I left things there, and did not apply for a single company.</p>
<p>I saw all my friends land handsome interns, and, well … It isn’t too easy, having to sit with uncertainity. Some of them actually landed really nice internships. At one point, I actually regretted not sitting for the interviews.</p>
<h3 id="first-rejection-or-was-it">First rejection (or was it?)</h3>
<p>But after 2-3 weeks, somehow Google India showed up on the internship portal. I was quite double minded about that, but somehow applied. My initial plan was to <em>upgrade</em> this offer to a Google US offer, but later learnt that was not possible. Of all the things in the world that could have happened, they did not even shortlist my CV for an interview. This was unexpected, because I (thought) I had a great CV. Many people have told me that my CV showed interest in research, and they might have thought that I would leave the internship. I personally think it just got overlooked, or maybe it was actually bad. Did not really count as an interview rejection, but had to some how survive the disappointment that creeped up. This is not how I would have expected my first application to go.</p>
<h3 id="second-rejection-or-was-it">Second rejection (or was it?)</h3>
<p>Anyhow, come September, I had applied to Palantir through a referral, and gave their coding test. That’s when I realized, how bad my interview skills were. I had never prepared for interviews, and suddenly it did not seem easy. This was a jolt to me, and no wonder, I got dropped there and then, in the Palantir process.</p>
<p>I took this one a bit more positively though, and started practicing competitive programming again. This was not the ideal thing to do, I think in hindsight, but at least it got me started.</p>
<p>Again, this wasn’t an interview rejection <code>:)</code></p>
<h3 id="google">Google?</h3>
<p>I got referred for Google North America around early October, and heard back in about 2 weeks. I had my interviews scheduled for early November. I still did not practice coding for interviews, and rather focussed a bit too much on algorithms. And thus, my preparation was lack-luster to say the least. 24 hours before my interview, I realized that I had once planned to solve the book <em>Cracking the coding interview</em>. It was absolutely hooking, and I regretted not solving it early on. I spent the remaining time going through the whole book. If you’re reading this for some tips (wrong place, buddy), that was wrong too. I should’ve coded. But I learnt that pretty soon.</p>
<h4 id="the-interviews">The interviews</h4>
<p>My first interview went horribly. The interviewer could not understand most of the stuff I said, and somehow a misunderstanding led me to code a solution for a slightly different problem, which he later pointed out. The interview ended with him thinking I did not get the correct code on time. Yes, I did not finish even a single question.</p>
<p>The second interview put some confidence in me though. The phone line was better, and I managed to complete the question, as well as chat for 5 minutes after that. In hindsight, I should have solved 2 questions, judging by interviews of my friends, but I was happy to have not left any clear sign of under-performance.</p>
<p>After this, I assumed that I shall be rejected. 2 of my friends whose interviews went on nicely, they got called for a third interview. In my opinion, my interviews went horribly.</p>
<h4 id="result">Result</h4>
<p>Well, I got put into the host-matching phase directly. I have no idea till date, as to why this happened. Perhaps CV and my approach to the problem saved the day. This was the night before my most important final exam in college, and this helped cheer me up.</p>
<p>So now, I was in the host matching phase. For those who do not know, this means that Google would put up my CV for project hosts, and they can interview me if they like my profile. If I did not get matched within 6 weeks, my process would be terminated. Some people got offers with a guaranteed project. I do not have any first or second hand information on this, but I assume this depends on your interview performance.</p>
<h3 id="facebook">Facebook</h3>
<p>A few days before my Google interview result, I applied for Facebook through a referral. What else would someone do, who is expecting to be rejected by one big company? I also applied to a handful of other companies, Microsoft Redmond, Microsoft Research, VMWare, Cisco to name a few. They never got back to me, despite referrals from employees.</p>
<p>The Facebook recruiter arranged for an interview at the end of November, which was pretty late. Before that interview, a friend put me in touch with a good friend of his, who would be interning at Facebook London this summers. This super-enthusiastic dude actually offered to give me mock interview practice. I flunked this one too. Managed to barely solve 1 problem in this interview, where I should have been able to do 2 due to the nature of the problem. This was when I had less than 24 hours left for my interview.</p>
<p>I resolved that I would definitely put in my best, and I picked up <em>Cracking the coding interview</em> again. Somehow, I realized that what went wrong is that I have never solved coding problems for practice. I put in all the time I could, and solved most of the important chapters of the book for practice. But importantly, I actually coded all the important problems this time.</p>
<p>The result was clear, I solved 2 problems correctly for the first time in an interview scenario. The practice paid off, and I could not be more thankful to that awesome dude who opened my eyes. I did not care about the result now, since I had driven a point, I could actually do this.</p>
<h3 id="google-host-matching">Google host matching</h3>
<p>A few days after my Facebook interview, I got a call for a project at Google Seattle, involving, Kubernetes! I had been mentioning that I would love to work on Kubernetes, and I had even tried to implement a feature on it (since it is Open Source). I interviewed immediately, within one day of the email. They noticed that I have worked on it already (a big plus, I think), and asked me a couple of design questions. I think I knew I did well, when after I sketched my solution into words, I got a reply <em>“That’s actually how we do it in production”</em>.</p>
<p>This was a dream come true for me. And surely enough, I got a reply the very next working day that I would like to move ahead with an offer. I did not waste any time to say that I would too.</p>
<p>I finally had an offer from Google US!</p>
<h3 id="facebook-again">Facebook again?</h3>
<p>I do not know why I did not sign Google’s offer the day I got it. I was given 10 working days to sign it, that meant 20th of December. One fine day (12th December), I get a mail saying that I got into the 2nd and final round of interviews for Facebook London internships. I had no clue what to do now, and wished I had simply signed Google.</p>
<p>Here was Facebook London, known to offer Pre-Placement offers in London and Menlo Park. The other side, Google US. A higher pay, a confirmed and nice project, but it mostly offers a job in Google India to interns, a place I was not looking forward to joining. I spent the 2 days before my next interview, simply talking to people if leaving a confirmed offer at Google for Facebook would be a good choice.</p>
<p>I gave the final interview with <em>I’m gonna drop FB anyway</em> in mind. I had again coded some problems from the same book for preparation, and again managed to solve 2 problems, though this time around I had major hiccups, and barely solved the easy problem. Somehow managed in a very short time, the solution for the 2nd, and supposedely tough problem. I think I did make an impression when the interviewer asked me about some nice project I did, and I described the development, algorithm and motivation for <a href="https://github.com/pclubiitk/puppy-love">Puppy Love</a>.</p>
<p>This ensured that FB would haunt me the next few days.</p>
<h3 id="decision-making">Decision making</h3>
<p>Somehow, I spent the remaining days juggling between Facebook and Google. It so happened that I got promised that I would get Facebook’s decision by Tuesday, 20th, the same day I was supposed to sign Google, and the day of ICPC’s Chennai regional round. I would barely have a few hours to decide between Facebook and Google, if I got accepted.</p>
<p>I was advised to not weigh this too much at the moment, since if I got rejected, it would be a heartbreak. I quote myself:</p>
<blockquote>
<p>I would rather be counting my chickens before they hatch and be prepared, than be modest but unprepared</p>
</blockquote>
<p><br> I spent hours talking to people. I made a huge list of points comparing Google and Facebook, and Facebook somehow won there. Mostly because of my desire for a PPO Job Offer abroad. I still shuffled around.</p>
<h3 id="the-final-day">The final day</h3>
<p>By the time the actual day came, I had settled on Facebook. I could bear a bad project, lesser pay, for long term benefits at Facebook.</p>
<p>ICPC was the least important thing to happen that day. I got away as soon as I could, and refreshed my Emails till 6:30 PM IST, but got nothing. I mailed my recruiter, and got a reply saying that a decision would be taken in a meeting about to start (in London), and I would know the result around 9 PM. This was bearable.</p>
<p>Come 9, 9:30, 10, 10:30, and yet, I did not hear back. I had decided I would drop Google if Facebook extended an offer to me, but for that, I needed an offer. I confirmed that I indeed had to sign my letter by midnight, and sent another mail to the Facebook recruiter, even sent her a message on Facebook. Not receiving a reply, I anxiously waited till much more than I had expected I would be willing.</p>
<p>It so happened, that she never got back to me. That night at least. I ended up signing Google at 11:45 PM, and congratulated myself on finally having an internship, assuming that I must have been rejected, and thus there was no rush to inform me.</p>
<p>It turned out the following morning, that I got a mail saying that Facebook has selected me for an internship! I could not believe this. This was early enough to mean that the decision must have been taken the previous working day. Of all the possibilities I had considered, reasons I had weighed for Facebook vs Google, all the interviews, the stress of the past 2 weeks, it all boiled down to a (possibly) sleeping or forgetful recruiter who did not get back to me the previous day. I do not know if the result was actually declared before midnight in India, when I signed my letter (6:30 PM GMT), but I assume that it would have been, since the meeting was scheduled for 2:00 PM GMT. In any case, the result did not get conveyed at the promised date / time.</p>
<h3 id="what-happened">What happened?</h3>
<p>I signed Google. It took multiple weird scenarios which built up to this day. As a friend quoted:</p>
<blockquote>
<p>Your internship at Google probably serves a much higher purpose</p>
</blockquote>
<p><br> I finally got back to pondering over the reasons I had loved my Google project, and felt happy about it. It was indeed a great opportunity, and I resolved to make it count.</p>
<p>Later that day, I got a call from a recruiter in London, describing my offer to me. I could not bear to hear it. I told her that there was some issue with my recruiter yesterday, and I have already signed Google. She arranged for my recruiter in India to call me, and I closed the offer. That’s it.</p>
<p>All the weeks of pondering over this decision finally got decided by a <em>sleeping recruiter</em>.</p>
</div>

<script src="/js/fb.js"></script>
<div
    class="fb-like"
    data-share="true"
    data-width="450"
    data-show-faces="true">
</div>

<script id="dsq-count-scr" src="//acehack.disqus.com/count.js" async></script>

<div id="disqus_thread"></div>
<script>
 // For debugging
 var disqus_developer = 1;
 var disqus_shortname = 'acehack';
 var disqus_config = function () {
     this.page.url = 'http://acehack.org/2016/12/internsaga/index.html';
     this.page.identifier = 'intern-saga';
     this.page.title = 'My internship interview saga';
 };
 (function() {
     var dsq = document.createElement('script'); dsq.type = 'text/javascript'; dsq.async = true;
     dsq.src = '//' + disqus_shortname + '.disqus.com/embed.js';
     (document.getElementsByTagName('head')[0] || document.getElementsByTagName('body')[0]).appendChild(dsq);
 })();
 (function () {
     var s = document.createElement('script'); s.async = true;
     s.type = 'text/javascript';
     s.src = '//' + disqus_shortname + '.disqus.com/count.js';
     (document.getElementsByTagName('HEAD')[0] || document.getElementsByTagName('BODY')[0]).appendChild(s);
 }());
</script>
<noscript>Please enable JavaScript to view the <a href="https://disqus.com/?ref_noscript" rel="nofollow">comments powered by Disqus.</a></noscript>
]]></summary>
</entry>
<entry>
    <title>Coding software-based mutex algos for fun</title>
    <link href="https://sakshamsharma.com/2016/12/mutex/index.html" />
    <id>https://sakshamsharma.com/2016/12/mutex/index.html</id>
    <published>2016-12-02T00:00:00Z</published>
    <updated>2016-12-02T00:00:00Z</updated>
    <summary type="html"><![CDATA[<div>
    <p>I learnt a couple of nice scheduling algorithms in my Operating Systems class last semester. They seemed like an interesting bunch, but it was not generally clear whether their performance would be good.</p>
<p>Now, what better a way to understand them than by coding them up? So it began.</p>
<p>First off, those who know about <a href="https://en.wikipedia.org/wiki/Global_interpreter_lock">GIL</a> would rather laugh at me when I tell you that I wrote the algorithms in Python.</p>
<blockquote>
<p>Multi-threading in Python? But Why ?!?!</p>
</blockquote>
<p>Simple reason, I was looking to write code fast. After all, I had an exam I hadn’t studied anything for (yes, this exam). Plus, I don’t know, but might be that GIL isn’t going to affect the output of this test significantly anyway (have not verified this yet).</p>
<p>So I went, and wrote a few classes (one for each algorithm):</p>
<h2 id="the-algorithms">The algorithms</h2>
<h3 id="dekkers-algorithm-2-thread">Dekker’s algorithm (2-thread)</h3>
<div class="sourceCode"><pre class="sourceCode python"><code class="sourceCode python"><span class="kw">class</span> Dekker:
    <span class="kw">def</span> <span class="fu">__init__</span>(<span class="va">self</span>):
        <span class="va">self</span>.flag <span class="op">=</span> [<span class="dv">0</span>, <span class="dv">0</span>]
        <span class="va">self</span>.turn <span class="op">=</span> <span class="dv">0</span>

    <span class="kw">def</span> lock(<span class="va">self</span>, i):
        j <span class="op">=</span> <span class="dv">1</span><span class="op">-</span>i
        <span class="cf">while</span> <span class="va">self</span>.flag[j]:
            <span class="cf">if</span> <span class="va">self</span>.turn <span class="op">==</span> j:
                <span class="va">self</span>.flag[i] <span class="op">=</span> <span class="dv">0</span>
                <span class="cf">while</span> <span class="va">self</span>.turn <span class="op">==</span> j:
                    <span class="cf">pass</span>
                <span class="va">self</span>.flag[i] <span class="op">=</span> <span class="dv">1</span>

    <span class="kw">def</span> unlock(<span class="va">self</span>, i):
        j <span class="op">=</span> <span class="dv">1</span><span class="op">-</span>i
        <span class="va">self</span>.turn <span class="op">=</span> j
        <span class="va">self</span>.flag[i] <span class="op">=</span> <span class="dv">0</span></code></pre></div>
<h3 id="petersons-algorithm-2-thread">Peterson’s algorithm (2-thread)</h3>
<div class="sourceCode"><pre class="sourceCode python"><code class="sourceCode python">Peterson:
    <span class="kw">def</span> <span class="fu">__init__</span>(<span class="va">self</span>):
        <span class="va">self</span>.flag <span class="op">=</span> [<span class="dv">0</span>, <span class="dv">0</span>]
        <span class="va">self</span>.turn <span class="op">=</span> <span class="dv">0</span>

    <span class="kw">def</span> lock(<span class="va">self</span>, i):
        j <span class="op">=</span> <span class="dv">1</span><span class="op">-</span>i
        <span class="va">self</span>.flag[i] <span class="op">=</span> <span class="dv">1</span>
        <span class="va">self</span>.turn <span class="op">=</span> j
        <span class="cf">while</span> <span class="va">self</span>.flag[j] <span class="kw">and</span> <span class="va">self</span>.turn <span class="op">==</span> j:
            <span class="cf">pass</span>

    <span class="kw">def</span> unlock(<span class="va">self</span>, i):
        <span class="va">self</span>.flag[i] <span class="op">=</span> <span class="dv">0</span></code></pre></div>
<h3 id="lamports-bakery-algorithm-n-thread">Lamport’s bakery algorithm (n-thread)</h3>
<div class="sourceCode"><pre class="sourceCode python"><code class="sourceCode python"><span class="kw">class</span> Lamport:
    <span class="kw">def</span> <span class="fu">__init__</span>(<span class="va">self</span>, c):
        <span class="va">self</span>.count <span class="op">=</span> c
        <span class="va">self</span>.ticket <span class="op">=</span> [<span class="dv">0</span>]<span class="op">*</span>c
        <span class="va">self</span>.choosing <span class="op">=</span> [<span class="dv">0</span>]<span class="op">*</span>c

    <span class="kw">def</span> lock(<span class="va">self</span>, i):
        <span class="va">self</span>.choosing[i] <span class="op">=</span> <span class="dv">1</span>
        <span class="va">self</span>.ticket[i] <span class="op">=</span> <span class="bu">max</span>(<span class="va">self</span>.ticket) <span class="op">+</span> <span class="dv">1</span>
        <span class="va">self</span>.choosing[i] <span class="op">=</span> <span class="dv">0</span>
        <span class="cf">for</span> j <span class="kw">in</span> <span class="bu">range</span>(<span class="dv">0</span>, <span class="va">self</span>.count):
            <span class="cf">while</span> <span class="va">self</span>.choosing[j]:
                <span class="cf">pass</span>
            <span class="cf">while</span> (<span class="va">self</span>.ticket[j] <span class="kw">and</span>
                   (<span class="va">self</span>.ticket[j], j) <span class="op">&lt;</span> (<span class="va">self</span>.ticket[i], i)):
                <span class="cf">pass</span>

    <span class="kw">def</span> unlock(<span class="va">self</span>, i):
        <span class="va">self</span>.ticket[i] <span class="op">=</span> <span class="dv">0</span></code></pre></div>
<h2 id="testing-how">Testing, how?</h2>
<p>So I made a simple function. It would grab the lock, increment the thread’s counter (globally placed), print the new total count for all threads, and release the lock.</p>
<p>I wrote some clever python idioms, but that’s irrelevant. What is relevant is the rate at which the counter increases for each thread. That could be throught of as a metric to quantify the performance of the algorithms.</p>
<h2 id="results">Results</h2>
<p>I ran each algorithm for 5 seconds, and looked at the count of iterations of each process. Also, to note the presence of unfairness, or an initial bias, I also ran one for 10 seconds, but it did not have any noticeable effect. Also, since Dekker and Peterson only work for 2 threads, I also tested Lamport on 2 threads (highly unfair, I know).</p>
<table>
<thead>
<tr class="header">
<th></th>
<th>Thread 1</th>
<th>Thread 2</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>Dekker</td>
<td>7415</td>
<td>7245</td>
</tr>
<tr class="even">
<td>Peterson</td>
<td>116</td>
<td>114</td>
</tr>
<tr class="odd">
<td>Lamport</td>
<td>119</td>
<td>117</td>
</tr>
</tbody>
</table>
<p>Through this, it is quite clear who the winner is. Dekker seems to perform much faster than the other 2. Of course, it has the other issues of being more complicated, and of only supporting 2 threads. But the huge performance gap is no doubt remarkable.</p>
<p>This experiment was never intended to be of very high accuracy; why, it was hardly more than an exam time fun exercise. But a difference of this magnitude is certainly of interest, and what an in-depth look at the algorithms reveals, not completely unexpected.</p>
</div>

<script src="/js/fb.js"></script>
<div
    class="fb-like"
    data-share="true"
    data-width="450"
    data-show-faces="true">
</div>

<script id="dsq-count-scr" src="//acehack.disqus.com/count.js" async></script>

<div id="disqus_thread"></div>
<script>
 // For debugging
 var disqus_developer = 1;
 var disqus_shortname = 'acehack';
 var disqus_config = function () {
     this.page.url = 'http://acehack.org/2016/12/mutex/index.html';
     this.page.identifier = 'mutex';
     this.page.title = 'Coding software-based mutex algos for fun';
 };
 (function() {
     var dsq = document.createElement('script'); dsq.type = 'text/javascript'; dsq.async = true;
     dsq.src = '//' + disqus_shortname + '.disqus.com/embed.js';
     (document.getElementsByTagName('head')[0] || document.getElementsByTagName('body')[0]).appendChild(dsq);
 })();
 (function () {
     var s = document.createElement('script'); s.async = true;
     s.type = 'text/javascript';
     s.src = '//' + disqus_shortname + '.disqus.com/count.js';
     (document.getElementsByTagName('HEAD')[0] || document.getElementsByTagName('BODY')[0]).appendChild(s);
 }());
</script>
<noscript>Please enable JavaScript to view the <a href="https://disqus.com/?ref_noscript" rel="nofollow">comments powered by Disqus.</a></noscript>
]]></summary>
</entry>
<entry>
    <title>Zero-trust - Safe and anonymous ANDing bits - Part 2</title>
    <link href="https://sakshamsharma.com/2016/11/puppy2/index.html" />
    <id>https://sakshamsharma.com/2016/11/puppy2/index.html</id>
    <published>2016-11-25T00:00:00Z</published>
    <updated>2016-11-25T00:00:00Z</updated>
    <summary type="html"><![CDATA[<div>
    <!-- <script type="text/x-mathjax-config"> -->
<!-- MathJax.Hub.Config({ -->
<!--   tex2jax: {inlineMath: [['$','$'], ['\\(','\\)']]} -->
<!-- }); -->
<!-- </script> -->
<!-- <script type="text/javascript" async -->
<!--   src="https://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-MML-AM_CHTML"> -->
<!-- </script> -->
<h3 id="recap">Recap</h3>
<p>For those who haven’t read the <a href="/2016/10/puppy1/">previous post</a>, this is a challenge which came up while trying to develop a secure version of a platform called <em>Puppy Love</em>. The introduction and the algorithmic challenge, taken from the previous article:</p>
<!--more-->
<p>The queerly named <em>Puppy Love</em> platform has been running in my university since 2014, meant to help shy nerds meet their crush, made my the Programming Club (of which, I happen to be the current coordinator). The platform opens 1 week prior to the Valentine’s Day every year, and let’s people choose up to 4 of their crushes, encrypting their choices with their password. At the stroke of the midnight hour, everyone logs back, and their choices are decrypted, and are then matched to other people’s choices. Only the people who matched are informed about it. If your <em>love</em> was unrequited (the other person didn’t like you), you will not get to know. More importantly, if you did not like the other person, you would not know if that person liked you or not.</p>
<p>The above seemed like a very rosy thing, till people began to find flaws. Some of the issues were with the code, and nothing too serious. But as would have, people began to get doubtful about the trust worthiness of the server admins. This year, being my turn to face the onslaught of accusations of looking at people’s choices, I, with Vinayak Tantia, a friend and fellow Coordinator, came up with a much improved algorithm to implement the same thing.</p>
<p>Here’s the biggest issue with such a platform:</p>
<blockquote>
<p>You do NOT trust me when I say my code on the server is NOT seeing your choices</p>
</blockquote>
<p>What is required is, how I call it, a <code>zero-server-trust</code> based algorithm. Regardless of what code is running on the server, the client should be able to prove that any information it sends to the server shall not reveal any information about the client’s choices.</p>
<h3 id="possible-algorithms">Possible algorithms</h3>
<p>We basically need a way to compute the <code>AND</code> of two bit values residing on two hosts (call them Alice and Bob), in the presence of a central server named Eve.</p>
<ul>
<li>One simple way is for Alice and Bob to share their bits to Eve, and trust Eve to not store the bits for the eyes of the admin of Eve, and only compute the AND of the bits, and send the AND value back to Alice and Bob. This is simple, but requires you to trust the server to not look at your choices. In case of naming your crushes, this is certainly not an option.</li>
<li>Use <a href="https://en.wikipedia.org/wiki/Garbled_circuit">Garbled Circuit</a> technique, along with <a href="https://en.wikipedia.org/wiki/Oblivious_transfer">Oblivious Transfer</a>, but modified to keep the last step on the central server. This technique is quite complicated at first, but has a major drawback. There is no guarantee of secrecy of choices if one party does not play by the protocol and cheats instead. This would be outlined in a future article.</li>
</ul>
<p>The second solution is promising, but can possibly be exploited to reveal the choice of the other party without them knowing your choice. What is required to prevent that attack is randomness in the case where a party is not interested. We outline the new algorithm in the next section.</p>
<h3 id="shared-knowledge-based-expected-result-algorithm">Shared knowledge based expected-result algorithm</h3>
<p>As a preface, I did read a couple of papers on this topic, but did not find a fair, secure and practical solution. This particular algorithm solves a weaker problem than most papers I found, which is: Computing AND of 2 secret bits in presence of an honest-but-curious server. This algorithm was designed originally as a modification of the one based on garbled circuits after I came to know of the violation of secrecy in that, and has been significantly simplied since then. Onto:</p>
<ul>
<li>Both parties have shared secret values A and B. These are not known to Eve by virtue of public key encryption.</li>
<li>Parties agree to this protocol:</li>
<li>Alice sends value <code>a = A</code> to Eve if she likes Bob.</li>
<li>Alice sends value <code>a = random</code> to Eve if she does not like Bob.</li>
<li>Bob sends value <code>b = B</code> to Eve if he likes Alice.</li>
<li>Bob sends value <code>b = random</code> to Eve if he does not like Alice.</li>
<li>Eve receives <code>a</code> and <code>b</code>. She stores <code>hash(a*b)</code> as result.</li>
<li>Alice and Bob manually compute <code>hash(A * B)</code>, and send it to server (server can verify malicious behavior if they don’t match)</li>
<li>It is a match only if the result and the expected value by both parties are the same.</li>
</ul>
<h3 id="a-few-comments-about-the-safety-of-the-protocol">A few comments about the safety of the protocol</h3>
<p>I do plan to formally prove this soon enough, but till then, here are some thoughts.</p>
<ul>
<li>Hash is not invertible. So if there was no match, Alice can not invert the result to get Bob’s sent value.</li>
<li>The hashing step needs to be secure against brute force attacks, especially because each party already knows one multiplicative factor of the number hashed. Either the values of A and B need to be very large (experiments/data needed), or the hash function has to be very slow computationally (preventing inversion by computational bottleneck).</li>
<li>Selecting random, and different values for A and B is important because Eve should not be able to see whether the values sent by Alice and Bob are same or different, and thus infer whether they matched or not.</li>
<li>The protocol itself is fully symmetric. Both Alice and Bob execute the exact same steps, regardless of who starts the protocol.</li>
<li>If Alice did not send A, she has no way of knowing whether Bob sent B or not, since the hash cannot be inverted (theoretically). The same is true for Bob.</li>
<li>The server does come to know the result of the computation here. But it should be possible to generalize. More on it later.</li>
</ul>
<h3 id="conclusion">Conclusion</h3>
<p>This algorithm is very simple to say the least, and seems secure to me. A formal proof ought to confirm this as well, though that is untrodden territory for me as of now. Do let me know in the comments or on email if something like this (fair and anonymous AND of bits) has been done before, or if you find a bug in this algorithm (if it is so, I cannot stress how important it is for me to know).</p>
</div>

<script src="/js/fb.js"></script>
<div
    class="fb-like"
    data-share="true"
    data-width="450"
    data-show-faces="true">
</div>

<script id="dsq-count-scr" src="//acehack.disqus.com/count.js" async></script>

<div id="disqus_thread"></div>
<script>
 // For debugging
 var disqus_developer = 1;
 var disqus_shortname = 'acehack';
 var disqus_config = function () {
     this.page.url = 'http://acehack.org/2016/11/puppy2/index.html';
     this.page.identifier = 'puppy-2';
     this.page.title = 'Zero-trust - Safe and anonymous ANDing bits - Part 2';
 };
 (function() {
     var dsq = document.createElement('script'); dsq.type = 'text/javascript'; dsq.async = true;
     dsq.src = '//' + disqus_shortname + '.disqus.com/embed.js';
     (document.getElementsByTagName('head')[0] || document.getElementsByTagName('body')[0]).appendChild(dsq);
 })();
 (function () {
     var s = document.createElement('script'); s.async = true;
     s.type = 'text/javascript';
     s.src = '//' + disqus_shortname + '.disqus.com/count.js';
     (document.getElementsByTagName('HEAD')[0] || document.getElementsByTagName('BODY')[0]).appendChild(s);
 }());
</script>
<noscript>Please enable JavaScript to view the <a href="https://disqus.com/?ref_noscript" rel="nofollow">comments powered by Disqus.</a></noscript>
]]></summary>
</entry>
<entry>
    <title>ZSH globbing to play music</title>
    <link href="https://sakshamsharma.com/2016/10/cliplay/index.html" />
    <id>https://sakshamsharma.com/2016/10/cliplay/index.html</id>
    <published>2016-10-29T00:00:00Z</published>
    <updated>2016-10-29T00:00:00Z</updated>
    <summary type="html"><![CDATA[<div>
    <p>Too lazy to learn to use the awesome <a href="https://cmus.github.io/">cmus</a>, and living on an (very regrettably) extremely unorganized music library since I came to IIT Kanpur, yeah that’s me these days when it comes to music. Without the likes of Spotify in India, I’ve been living on YouTube since more than 2 years, when I used to have a fully organized music library back in my school days.</p>
<p>Having a very dynamic (and mostly incomplete) music library, I was constantly being annoyed having to import folders, sort some, organize others. What would be ideal in such a scenario is a way to live in the shell itself, but have the freedom to easily search for music files and play them.</p>
<p>If you’re not familiar with pattern globbing, fire up ZSH and try this:</p>
<pre><code>cd Pictures
ls **/*.jpg</code></pre>
<p>Nice right? The <code>**</code> stands for recursive searching. So it will go and search recursively in all subfolders of the current directory.</p>
<h3 id="zsh-play">zsh-play</h3>
<p>I envisioned an interface of this sort:</p>
<pre><code>play river flows</code></pre>
<p>This ought to open all songs containing the words <em>river</em> and <em>flows</em> in their name, in this particular order, regardless of the case of the spellings. Also, it shouldn’t be matching all kinds of files, so I added a <code>-t</code> flag, to decide the file type, set to <code>mp3</code> by default, but something like <code>-t flac</code> works as well.</p>
<h3 id="how-to">How to?</h3>
<p>The code was short enough. I added a new ZSH function in my ZSH configuration, and voila! In reality though, it took me a great while to make it work, because I did not know (sounds obvious in hindsight as always) that globs (The useful <code>*</code>s) are not expanded when coming from a string variable in the shell. And why should they?</p>
<p>You can pick the code from the end of this article, and use it by putting it in your .zshrc and sourcing it. Voila!</p>
<h3 id="lessons">Lessons</h3>
<ul>
<li>Globs aren’t expanded from strings. Don’t hope to put strings containing <code>*</code>s in a command, and expect it to expand. Use <code>{~var}</code> instead.</li>
<li>Functions in ZSH are quite powerful! Better use them instead of writing aliases and small scripts.</li>
<li><code>getopts</code> and <code>OPTARGS</code> is a really nice way to implement CLI arguments!</li>
<li>You need <code>setopt extendedglob</code> for some globbing to work.</li>
<li>Case insensitive matching of globs uses <code>(#i)</code>.</li>
<li>You can generate array of names of files very easily with <code>list=(**/*.mp3)</code> kind of syntax.</li>
</ul>
<h3 id="the-code">The code:</h3>
<div class="sourceCode"><pre class="sourceCode bash"><code class="sourceCode bash"><span class="kw">function</span><span class="fu"> play()</span> <span class="kw">{</span>
    <span class="va">EXT=</span><span class="st">&quot;mp3&quot;</span>
    <span class="kw">while</span> <span class="bu">getopts</span> “ht:r:p:v” OPTION
    <span class="kw">do</span>
        <span class="kw">case</span> <span class="va">$OPTION</span><span class="kw"> in</span>
            t<span class="kw">)</span>
                <span class="va">EXT=$OPTARG</span>
                <span class="bu">echo</span> <span class="st">&quot;</span><span class="va">$EXT</span><span class="st"> extension&quot;</span>
                <span class="bu">shift</span> 2
                <span class="kw">;;</span>
            ?<span class="kw">)</span>
            <span class="ex">usage</span>
            <span class="kw">;;</span>
        <span class="kw">esac</span>
    <span class="kw">done</span>

    <span class="ex">setopt</span> extendedglob
    <span class="va">pat=$(</span><span class="bu">echo</span> -n <span class="st">&quot;</span><span class="va">$@</span><span class="st">&quot;</span> <span class="kw">|</span> <span class="fu">sed</span> -E <span class="st">&#39;s/\s+/\*/g&#39;</span><span class="va">)</span>
    <span class="va">list=(</span>(#i<span class="va">)</span>**/*$<span class="dt">{~pat}*.${EXT}</span>)
    <span class="ex">vlc</span> <span class="va">$list</span>
<span class="kw">}</span></code></pre></div>
</div>

<script src="/js/fb.js"></script>
<div
    class="fb-like"
    data-share="true"
    data-width="450"
    data-show-faces="true">
</div>

<script id="dsq-count-scr" src="//acehack.disqus.com/count.js" async></script>

<div id="disqus_thread"></div>
<script>
 // For debugging
 var disqus_developer = 1;
 var disqus_shortname = 'acehack';
 var disqus_config = function () {
     this.page.url = 'http://acehack.org/2016/10/cliplay/index.html';
     this.page.identifier = 'zsh-play';
     this.page.title = 'ZSH globbing to play music';
 };
 (function() {
     var dsq = document.createElement('script'); dsq.type = 'text/javascript'; dsq.async = true;
     dsq.src = '//' + disqus_shortname + '.disqus.com/embed.js';
     (document.getElementsByTagName('head')[0] || document.getElementsByTagName('body')[0]).appendChild(dsq);
 })();
 (function () {
     var s = document.createElement('script'); s.async = true;
     s.type = 'text/javascript';
     s.src = '//' + disqus_shortname + '.disqus.com/count.js';
     (document.getElementsByTagName('HEAD')[0] || document.getElementsByTagName('BODY')[0]).appendChild(s);
 }());
</script>
<noscript>Please enable JavaScript to view the <a href="https://disqus.com/?ref_noscript" rel="nofollow">comments powered by Disqus.</a></noscript>
]]></summary>
</entry>
<entry>
    <title>Anonymous, zero-server-trust couple matching - Part 1</title>
    <link href="https://sakshamsharma.com/2016/10/puppy1/index.html" />
    <id>https://sakshamsharma.com/2016/10/puppy1/index.html</id>
    <published>2016-10-25T00:00:00Z</published>
    <updated>2016-10-25T00:00:00Z</updated>
    <summary type="html"><![CDATA[<div>
    <script type="text/x-mathjax-config">
MathJax.Hub.Config({
  tex2jax: {inlineMath: [['$','$'], ['\\(','\\)']]}
});
</script>
<script type="text/javascript" async
  src="https://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-MML-AM_CHTML">
</script>
<p><strong>NOTE:</strong>: The algorithm used has been re-worked, and changed since this article was written. Expect a new article with the formal algorithm soon :)</p>
<p><strong>Update</strong>: The new article with the latest algorithm is <a href="/2016/11/puppy2">here on my blog</a>. Do read that article as a follow up!</p>
<p>The queerly named <em>Puppy Love</em> platform has been running in my university since 2014, meant to help shy nerds meet their crush, made my the Programming Club (of which, I happen to be the current coordinator). The platform opens 1 week prior to the Valentine’s Day every year, and let’s people choose up to 4 of their crushes, encrypting their choices with their password. At the stroke of the midnight hour, everyone logs back, and their choices are decrypted, and are then matched to other people’s choices. Only the people who matched are informed about it. If your <em>love</em> was unrequited (the other person didn’t like you), you will not get to know. More importantly, if you did not like the other person, you would not know if that person liked you or not.</p>
<p>The above seemed like a very rosy thing, till people began to find flaws. Some of the issues were with the code, and nothing too serious. But as would have, people began to get doubtful about the trust worthiness of the server admins. This year, being my turn to face the onslaught of accusations of looking at people’s choices, I, with Vinayak Tantia, a friend and fellow Coordinator, came up with a much improved algorithm to implement the same thing.</p>
<p>Here’s the biggest issue with such a platform:</p>
<blockquote>
<p>You do NOT trust me when I say my code on the server is NOT seeing your choices</p>
</blockquote>
<p><br> What is required is, how I call it, a <code>zero-server-trust</code> based algorithm. Regardless of what code is running on the server, the client should be able to prove that any information it sends to the server shall not reveal any information about the client’s choices.</p>
<h3 id="the-algorithm">The algorithm</h3>
<h4 id="email-based-initial-auth">Email based initial auth</h4>
<p>Instead of using the campus FTP or proxy based logins, which would have required you to send your password to the server (thus requiring trust), we send an initial email to the person’s official IIT Kanpur email address, and let the person create a password. The password’s hash is sent to the server for storage. The hash will be used for future logins, and thus the plain password never leaves the client.</p>
<h4 id="public-private-keys">Public Private Keys</h4>
<p>On the initial password creating, we also create a new public-private keypair on the client itself. The private key is then encrypted with the plaintext password of the user. The plaintext public key and the encrypted private key are then kept on the server.</p>
<h4 id="the-usage">The usage</h4>
<p>The user is allowed to query for people and add them to his tentative list of likes. The queries are routed to the IIT Kanpur internal student search, and thus the server cannot be logging the client’s requests. These choices are saved in a string, which has a few random bytes in the start. This string is encrypted with the private key, and sent to the server for storage and later retrieval. The random string is added to ensure that the server cannot deduce addition or removal of choices. Thus, whether the choices were changed or not, there shall be a change in the encrypted data.</p>
<h4 id="submission">Submission</h4>
<p>Finally, when the user is ready to lock his choices, the client fetches the public keys of all the students on campus. This data should be the order of magnitude of a few mega bytes. The client encodes its preference (a boolean) in a string (described later) for each student on the campus, and sends these strings back to the server for storage. Each string is encrypted with the public key of the intended recepient, and thus they are meaningless for the server.</p>
<h4 id="matching">Matching</h4>
<p><strong>Note</strong>: This section is deprecated in favor of the algorithm described in the <a href="/2016/11/puppy2">follow up post</a>.</p>
<p>The most tricky part. How does the server match two people, without knowing any of their choices? Turns out, there’s something called Homomorphic computation, which is intended for this very purpose. Here’s a motivating example:</p>
<p><br /><span class="math display">$$
m_1^{e} \times m_2^{e} = (m_1 \times m_2)^{e}\\
((m_1 \times m_2)^{e})^{d} = (m_1 \times m_2)
$$</span><br /></p>
<p>So basically, the server could compute the product of <span class="math inline"><em>m</em><sub>1</sub></span> and <span class="math inline"><em>m</em><sub>2</sub></span>, and convey the result to both the parties. They could separately get back the value of <span class="math inline"><em>m</em><sub>1</sub> × <em>m</em><sub>2</sub></span>, without the server ever coming to know the product. All this requires is a shared public private key pair between every two people on the campus.</p>
<p>Of course, we’re not going to be using product, since a product has enough information to get the other person’s response. What is required is a message of the sort such that it encodes the choice, but can not be inverted to get the choice. Only when it is used with another message containing a positive choice is it possible to get any information out of the message.</p>
<p><strong>Update</strong>: The above technique means that if the database is compromised, any person can take the other person’s response, forge a new response from his side, and see what choices were filled. To disallow this, the algorithm needs to be changed into a two-step method (both people share their choice in the form of two messages), where the second message is dependent on the first message of the other person. We are still working on deciding the exact form to be taken.</p>
<h4 id="server-requirements">Server requirements</h4>
<p>There shall be a large number of entries in the database. For each pair of people, there shall be one entry in the database storing their messages, and their shared secret. The server is only expected to be providing the service it is claiming to provide, that is, letting people match. Thus, we only assume that the server shall not be trying to jeopardize the whole matching game by not playing its part. At no point is the server expected to maintain any level of trust.</p>
<h3 id="conclusion">Conclusion</h3>
<p>The project is being written using Node and JavaScript, and the source code is publicly available on <a href="https://github.com/pclubiitk/puppy-love">Github here</a>. We hope to finish it within a month, considering that the semester is on.</p>
</div>

<script src="/js/fb.js"></script>
<div
    class="fb-like"
    data-share="true"
    data-width="450"
    data-show-faces="true">
</div>

<script id="dsq-count-scr" src="//acehack.disqus.com/count.js" async></script>

<div id="disqus_thread"></div>
<script>
 // For debugging
 var disqus_developer = 1;
 var disqus_shortname = 'acehack';
 var disqus_config = function () {
     this.page.url = 'http://acehack.org/2016/10/puppy1/index.html';
     this.page.identifier = 'puppy-1';
     this.page.title = 'Anonymous, zero-server-trust couple matching - Part 1';
 };
 (function() {
     var dsq = document.createElement('script'); dsq.type = 'text/javascript'; dsq.async = true;
     dsq.src = '//' + disqus_shortname + '.disqus.com/embed.js';
     (document.getElementsByTagName('head')[0] || document.getElementsByTagName('body')[0]).appendChild(dsq);
 })();
 (function () {
     var s = document.createElement('script'); s.async = true;
     s.type = 'text/javascript';
     s.src = '//' + disqus_shortname + '.disqus.com/count.js';
     (document.getElementsByTagName('HEAD')[0] || document.getElementsByTagName('BODY')[0]).appendChild(s);
 }());
</script>
<noscript>Please enable JavaScript to view the <a href="https://disqus.com/?ref_noscript" rel="nofollow">comments powered by Disqus.</a></noscript>
]]></summary>
</entry>
<entry>
    <title>moVi - Mobile video protocol (Part 1)</title>
    <link href="https://sakshamsharma.com/2016/10/movi/index.html" />
    <id>https://sakshamsharma.com/2016/10/movi/index.html</id>
    <published>2016-10-08T00:00:00Z</published>
    <updated>2016-10-08T00:00:00Z</updated>
    <summary type="html"><![CDATA[<div>
    <p>After a really late start to my undergraduate project (UGP) this semester, I finally started working on something we call <a href="https://github.com/netsecIITK/moVi">moVi</a>.</p>
<p>First off, if the idea reminds you of <a href="https://mosh.org">mosh - Mobile Shell</a> by Keith Winstein and Hari Balakrishnan of MIT, it is not a coincidence. I’d loved their paper called <em>Mosh: An Interactive Remote Shell for Mobile Clients</em>, and moVi is in a way taking their idea forward. We’re 2 undergraduates working on this project, me and Ayush Agarwal, under the guidance of Prof. Sandeep Shukla of IIT Kanpur (previously at Virginia Tech).</p>
<p>I’ve been working on moVi since around 20 (regular semester) days now; here’s what all <strong>I</strong> know about moVi by now :)</p>
<h2 id="introduction">Introduction</h2>
<p>The core idea is simple. How do you make a protocol robust to network, IP, and location changes? A conventional solution might be DDNS (Dynamic DNS). Some idealized scenarios let DDNS do real-time updates of IP of its clients. That way, both the clients can continue their communication, whatever that might be, despite changes in IP of one or both clients. But is there another, cleaner way?</p>
<h2 id="what-mosh-does---ideas">What Mosh does - Ideas</h2>
<p>Winstein, Balakrishnan propose in the above paper, a much simpler technique. Instead of using a global directory for such clients, they instead rely on the connectionless state of UDP. Both parties share a secret key, and send a signature of their message (or an encrypted version of the message) signed with that secret key. When one of the sides receives a <em>valid</em> packet from some other IP, it can safely assume that the other side has changed its IP.</p>
<p>Apart from that, another thing which they use is what they call <em>State Synchronization Protocol</em>. This is essentially noting the fact that to ensure both people see the same version of an object (state), you do not need to share all past states. Mosh, in some sense, <em>renders</em> the terminal view on the SSH server side, and sends the view, limited by the frame rate, to the person who has SSHed into the machine from a mobile channel.</p>
<h2 id="what-movi-does">What moVi does</h2>
<p>We use the idea of connectionless signed UDP channels between 2 parties for UDP based communication. But what communication? Why not video?</p>
<p>Real time (and non-replayable) video is an ideal candidate for using UDP. One does not really care what traffic is lost, since the communication has to be real time, and <em>better late than never</em> is not really valid for a real-time packet now :)</p>
<p>So here are the things we’ve done, or are planning to do:</p>
<h3 id="robust-to-ip-changes">Robust to IP changes</h3>
<p>This simply implements the idea used by Mosh, without any modifications. We rely on UDP and a secret key shared between the parties beforehand. For now, we let the parties share the secret key over an initial TCP connection, which is then torn down when the UDP connection starts. The TCP connection is also used to communicate the UDP ports to be used for video communication from each side.</p>
<h3 id="robust-to-data-losses">Robust to data losses</h3>
<p>Packets are fickle things. They could get lost due to full queues and congestion, or because of intermediate network issues (especially WiFi). But do we need all packets to reach reliably?</p>
<p>Instead of using a reliable TCP connection, or a ack-all-packets kind of implementation, we instead use a different approach tailored for slow networks. We divide the whole video into small regions of a pre-decided size (geometrically for now, but we’re planning to use regions in the Fourier transform as well). The sender first retreives the current frame from the camera, and divides it into regions. Each region is separately compressed using JPEG. This is now sent over the network, with a header specifying the region number / location. Some points to note, design choices and variations:</p>
<ul>
<li>The chances of a region reaching the other side quickly relies on the size of the packet. IP fragmentation can handle packet loss for packets having size a small multiple of the MTU (Maximum transfer unit), which is most often set to 1500 bytes (including the headers). We’ve noticed that using regions of size 150x150, using JPEG compression with quality set to 50, each region has an approximate size of 2-3 kilobytes. This should offer sufficient reliability, though we’re yet to test it on bad networks.</li>
<li>Why specifically JPEG? Why not some video compression methods? The reason we had (as people utterly unfamiliar to video encoding) is that the video compression protocols work on the principle that each state of the video is available, either as a diff, or as a normal full frame. We do not have that luxury. We never know whether a region has reached or not.</li>
<li>We implement our own optimizations to improve the image encoding method for our particular use case of real time videos. The receiver keeps a small buffer of states of the video (per region). Let this number be 100 for now. Since this is a 2 way communication, the receiver himself is sending updates for the same region. In those packets, it would embed ACKs for the last state received. This way, each sender knows each region’s latest state received, modulo packet losses on sending and ACKing side. Each sender, instead of sending a frame separately, instead sends the diffs of the region with the last ACKed state of that region. If somehow the sender has already sent a 100 diffs, and yet has not received another ACK, it will assume that something is wrong, and will conservatively send a non-diff packet instead. There shall be a header flag which signifies if it is a diff, and if yes, from which state.</li>
<li>Another possible optimization is that regions having no change are not sent at all. This is useful for stable camera situations. But to ensure that states still get ACKed, we ensure that at least one region is sent from each row, and that region contains the ID of the regions in that row which did not get sent because of no changes.</li>
</ul>
<h3 id="robust-to-varying-network-speed-and-reliability">Robust to varying network speed and reliability</h3>
<p>Note that using this technique, if the reliability of the network is too low (but UDP queues are not too small), one can ideally send smaller regions of the frame, increasing the number of packets by a significant amount but bringing the packet size below the MTU size. Plus, the JPEG encoding quality can be varied in real time as well, reducing the packet size further.</p>
<h3 id="synchronization-of-regions-joining-together-to-form-a-frame">Synchronization of regions joining together to form a frame</h3>
<p>The above idea seems coherent, but in practice it shows a big issue. If there are a large number of regions (seen with 50x50 regions in an image of 600x400 pixels), there is a small delay in the regions getting <em>pasted</em> onto the displayed frame. This causes an effect such that the image is never fully synchronized. To avoid this, we bunch together updates for regions, and only when we have all the regions in the latest state, or there is a timeout (approximately the desired frame rate), whichever is earlier, do we update the frame and display it to the client.</p>
<h2 id="conclusion">Conclusion</h2>
<p>The code is <a href="https://github.com/netsecIITK/moVi">here (moVi)</a> on Github. It is still in progress, but we do hope this comes out to be something interesting! We’ve still got a quarter of the semester left with us.</p>
</div>

<script src="/js/fb.js"></script>
<div
    class="fb-like"
    data-share="true"
    data-width="450"
    data-show-faces="true">
</div>

<script id="dsq-count-scr" src="//acehack.disqus.com/count.js" async></script>

<div id="disqus_thread"></div>
<script>
 // For debugging
 var disqus_developer = 1;
 var disqus_shortname = 'acehack';
 var disqus_config = function () {
     this.page.url = 'http://acehack.org/2016/10/movi/index.html';
     this.page.identifier = 'movi-1';
     this.page.title = 'moVi - Mobile video protocol (Part 1)';
 };
 (function() {
     var dsq = document.createElement('script'); dsq.type = 'text/javascript'; dsq.async = true;
     dsq.src = '//' + disqus_shortname + '.disqus.com/embed.js';
     (document.getElementsByTagName('head')[0] || document.getElementsByTagName('body')[0]).appendChild(dsq);
 })();
 (function () {
     var s = document.createElement('script'); s.async = true;
     s.type = 'text/javascript';
     s.src = '//' + disqus_shortname + '.disqus.com/count.js';
     (document.getElementsByTagName('HEAD')[0] || document.getElementsByTagName('BODY')[0]).appendChild(s);
 }());
</script>
<noscript>Please enable JavaScript to view the <a href="https://disqus.com/?ref_noscript" rel="nofollow">comments powered by Disqus.</a></noscript>
]]></summary>
</entry>
<entry>
    <title>Privately send data to host without disclosing IP</title>
    <link href="https://sakshamsharma.com/2016/09/privtorrent/index.html" />
    <id>https://sakshamsharma.com/2016/09/privtorrent/index.html</id>
    <published>2016-09-19T00:00:00Z</published>
    <updated>2016-09-19T00:00:00Z</updated>
    <summary type="html"><![CDATA[<div>
    <p>While thinking on some lines related to networks and security, I recently came up with an idea of having a distributed network connection without disclosing your identity to the sender. The idea is still nascent, and requires you to have root access to your machine (and a custom kernel module, which I’m miles away from writing in the middle of my semester). I’d nevertheless appreciate comments on this idea :)</p>
<h3 id="tcp">TCP</h3>
<p>A brief look at the relevant parts of TCP/IP needed for this:</p>
<ul>
<li>The sender opens a TCP connection with the client. This connection is over IP packets, which are stateless.</li>
<li>IP can be spoofed easily. It is possible to send a packet to someone which has a misleading ‘source’ header set in the IP packet.</li>
<li>Spoofing your identity over a TCP connection is not easy, since the response is sent to the host with the IP you set in the source.</li>
<li>TCP prevents someone else from sending packets as you by setting up a random sequence number initially during the handshaking with the client.</li>
</ul>
<h3 id="basic-idea">Basic idea</h3>
<p>I’ll take the example of torrent here, and assume that there are <code>n</code> senders (peers) in the torrent connection, who are uploading, let’s say, ubuntu’s iso file to a host <code>cl</code> (client); and the senders don’t want their IP to be known to <code>cl</code>. I will not attempt to get into the technical details of torrent here though.</p>
<p>Imagine that there is a service like tor which let’s you talk to hosts anonymously. This would be somewhat of a proxy server. Call it <code>p</code>.</p>
<p>A possible way would be for all the <code>n</code> senders to route their traffic through <code>p</code>. This is not a scalable idea perhaps, since many senders sending data via <code>p</code> would consume a lot of network resources over <code>p</code>.</p>
<p>Here is a possibly better way. Host <code>p</code> sets up a TCP connection with the client <code>cl</code>. It gets a certain receive buffer. The <code>n</code> senders decide among themselves about how they wish to communicate the data to the client. One way is for each sender to send every <code>n</code>th byte. So sender <code>i</code> sends the <code>i</code>th, <code>(i+1)</code>th and so on bytes. The host <code>p</code> lets all the senders know the relevant TCP packet numbers. Now the host <code>p</code> only has to communicate with the client <code>cl</code> mostly, receiving it’s responses on the TCP connection it set up. All the senders spoof their packets by sending the packets with the source marked as <code>p</code>. The client will get the packets in the right order (due the senders deciding, and using the right TCP sequence number), and will respond to <code>p</code>, which can later inspect the response and let the senders know accordingly if it is something they should know.</p>
<h3 id="details">Details</h3>
<ul>
<li>Senders need to honor the receive window of the client. Perhaps each one treats the effective receive window as the <code>1/n</code>th fraction of the actual receive window.</li>
<li>There is no need to send every ACK to the senders, except to help with fast retransmits, and for them to know the network state. There might exist ways to avoid sending all responses from <code>p</code> to the senders (which puts load on <code>p</code>).</li>
<li>If the network has low packet loss rate, it <em>may</em> be advantageous to not communicate all ACKs to the senders. It would only slow down responses when there’s a packet loss.</li>
<li>If the host <code>p</code> detects a dropped packet, it communicates that to the sender who was supposed to send that packet.</li>
<li>If host <code>p</code> detects network congestion (triple duplicate ACK, or ECN etc), it communicates this with all the senders.</li>
</ul>
<h3 id="advantages">Advantages</h3>
<ul>
<li>The client <code>cl</code> cannot find out which IP sent the actual packet.</li>
<li>You do not need as high network resources as tor on the host machine <code>p</code> for this to work.</li>
<li>Possibly inspire ideas related to private distributed network communication.</li>
<li>One could possibly send part data from one host, and part from the other host via this mechanism. Thus, someone doing a man-in-the-middle on one sender would only see partial data being sent. So you could open a connection to a website, and a listener would see you sending <code>GET / HTTP/1.0</code> to that website, while there would be another machine which sent the remaining request (maybe some password in clear-text, which was mandated by the website. I know, not a good example).</li>
</ul>
<h3 id="cons-and-limitations">Cons and limitations</h3>
<p>After discussion with some other people, there are a few things to this approach which make it impractical in use.</p>
<ul>
<li>Unless ACKs are sent to the actual sender, the idea would actually slow down the network quite some bit, since that would mean reimplementing TCP without a lot of information from the network.</li>
<li>This is only suited for large sending. Receiving data over this mechanism would be highly impractical.</li>
<li>Some routers may not forward plain IP packets without a TCP connection set up (Details and comments welcome on this). You may need to own the network so be able to employ such a mechanism.</li>
<li>Requires root privileges on the hosts.</li>
</ul>
</div>

<script src="/js/fb.js"></script>
<div
    class="fb-like"
    data-share="true"
    data-width="450"
    data-show-faces="true">
</div>

<script id="dsq-count-scr" src="//acehack.disqus.com/count.js" async></script>

<div id="disqus_thread"></div>
<script>
 // For debugging
 var disqus_developer = 1;
 var disqus_shortname = 'acehack';
 var disqus_config = function () {
     this.page.url = 'http://acehack.org/2016/09/privtorrent/index.html';
     this.page.identifier = 'dist-private-communication';
     this.page.title = 'Privately send data to host without disclosing IP';
 };
 (function() {
     var dsq = document.createElement('script'); dsq.type = 'text/javascript'; dsq.async = true;
     dsq.src = '//' + disqus_shortname + '.disqus.com/embed.js';
     (document.getElementsByTagName('head')[0] || document.getElementsByTagName('body')[0]).appendChild(dsq);
 })();
 (function () {
     var s = document.createElement('script'); s.async = true;
     s.type = 'text/javascript';
     s.src = '//' + disqus_shortname + '.disqus.com/count.js';
     (document.getElementsByTagName('HEAD')[0] || document.getElementsByTagName('BODY')[0]).appendChild(s);
 }());
</script>
<noscript>Please enable JavaScript to view the <a href="https://disqus.com/?ref_noscript" rel="nofollow">comments powered by Disqus.</a></noscript>
]]></summary>
</entry>
<entry>
    <title>Buffering packets in a network with a variable source rate</title>
    <link href="https://sakshamsharma.com/2016/09/buffering/index.html" />
    <id>https://sakshamsharma.com/2016/09/buffering/index.html</id>
    <published>2016-09-15T00:00:00Z</published>
    <updated>2016-09-15T00:00:00Z</updated>
    <summary type="html"><![CDATA[<div>
    <script type="text/x-mathjax-config">
MathJax.Hub.Config({
  tex2jax: {inlineMath: [['$','$'], ['\\(','\\)']]}
});
</script>
<script type="text/javascript" async
  src="https://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-MML-AM_CHTML">
</script>
<p>As a natural extension my project <a href="https://github.com/sakshamsharma/HTTP-Over-Protocol">hop</a>, I decided to try and optimize it’s buffering technique. Here is the problem formalized a bit:</p>
<ul>
<li>A source which is capable of writing bytes at the rate of <code>S bytes/sec</code>.</li>
<li>A network channel which can carry bytes at a bandwidth or rate of <code>B bytes/sec</code>. <code>B</code> is almost always slower than <code>S</code>.</li>
<li>You can choose to read the data from the source slower than it can write, but that will cause delays.</li>
<li>Maximum delay for any byte is bounded by the value <code>D</code>.</li>
<li>To send <code>k</code> bytes in an IP packet, you need to attach a header of size <code>h</code>.</li>
<li><code>h</code> does not depend on <code>k</code>, but <code>k</code> is limited to the size of an IP packet minus <code>h</code>. Thus, <code>k</code> can be expected to be around 65000 bytes at max.</li>
<li>An IP packet is received as an atomic entity. So <code>k</code> chunked bytes will be received at the same time.</li>
</ul>
<p>I tried to find an optimal solution for this, or a related problem. It turns out that this problem doesn’t even present a solution, and modifying the problem seems to help provide a workable problem. For the following section, I will assume that there is an added condition to the problem:</p>
<ul>
<li>You can afford to lose bytes at some rate.</li>
</ul>
<p>With this information, I set on to try find something interesting in this problem (and end up using the found solution for another problem).</p>
<p><strong>Note</strong>: Although assumed that the source can write at the speed of <code>S bytes/sec</code>, this will be considered only as an upper limit.</p>
<h3 id="losses-are-allowed">Losses are allowed</h3>
<p>Here we are assuming (for the sake of keeping the problem well-defined) that the receiver does not mind random byte losses.</p>
<p>We first note a few key ideas regarding the optimal solution here:</p>
<ul>
<li>It is wasteful to not be using the network channel at any point of time. Better read and keep some bytes ready beforehand</li>
<li>Sending too large chunks would increase delay</li>
<li>Sending small chunks would cause the packet header size overhead to become significant</li>
</ul>
<h4 id="async-reading">Async reading</h4>
<p>We have 2 client side processes/threads. One of them handles reading from the input source, while the other handles writing to the network socket. For sake of convenience, we will now assume <span class="math inline"><em>s</em><sub><em>r</em></sub></span> to be the speed of reading from the source asynchonously.</p>
<p>In the given scenario, this would follow:</p>
<ul>
<li>The last read <code>k</code> bytes take <span class="math inline">$\frac{h+h}{B}$</span> time to be sent.</li>
<li>Meanwhile, the reader accumulates <code>k</code> bytes to be sent once the above send is done.</li>
<li>While reading at the rate <span class="math inline"><em>s</em><sub><em>r</em></sub></span>, this takes <span class="math inline">$\frac{k}{s_r}$</span> time.</li>
<li>The remaining bytes written by the source during the time of send are lost.</li>
<li>This loss time is <span class="math inline">$\frac{h+k}{B} - \frac{k}{s}$</span>.</li>
<li>These newly read bytes are sent once the previous send is finished.</li>
</ul>
<p>Now we have the condition that any packet which reaches the receiver should not be too old (at max <code>D</code> seconds old). In that case, it is favorable to send only the packets read just before the next send (the most latest packets, since they are more valuable than the old ones). The figure describes this (green is reading from source, blue is sending over network):</p>
<div class="figure">
<img src="/images/articles/drawing1.png" />

</div>
<p>Now note that we are trying to minimize the losses, while keeping the delay in check. Total loss is <span class="math inline"><em>N</em>/<em>k</em></span> times the loss per <code>k</code> bytes, where <code>N</code> is the total amount of data to be sent (just an asymptotic constant for this case). We try find an expression for the total loss. Here, wasted means bytes which were not read, and thus never sent.</p>
<p><br /><span class="math display">$$
wasted\ time\ per\ k\ bytes = \frac{h+k}{B} - \frac{k}{s_r}\\
wasted\ bytes\ per\ k\ bytes\ sent = (\frac{h+k}{B} - \frac{k}{s_r})\times s_r\\
total\ wastage\ in\ N\ bytes = (\frac{h+k}{B} - \frac{k}{s_r})\times s_r \times \frac{N}{k} \leq D
$$</span><br /></p>
<p>Also <br /><span class="math display">$$
delay\ of\ max\ delayed\ byte = \frac{h+k}{B} + \frac{k}{s_r} \leq D\\
\Rightarrow k \leq {D - \frac{h}{B}} \times \frac{Bs_r}{B+s_r}
$$</span><br /></p>
<p>Using the constraint on <code>k</code>, we get:</p>
<p><br /><span class="math display">$$
Wastage\ ratio = \frac{Wastage}{N} = (\frac{hs_r}{B} \times \frac{B+s_r}{DB-h}) + \frac{s_r - B}{B}
$$</span><br /></p>
<p>This whole discussion assumed that old packets are considered useless. So our source should either find a way to not send packets for a while, or it should be robust enough to be able to tolerate some fractions of losses.</p>
<p>For Video streaming, one can envision a scenario where the source sends packets frame by frame, with the gap (the one we considered the loss) as a small fraction less than the frame gap in the desired frame rate.</p>
<h4 id="non-jerky-data-loss">Non-jerky data loss</h4>
<p>Now what if it is surely a video stream, but we don’t want jerks in the data? (We’re still okay with losses). In that case, almost the whole analysis is the same as above, with the exception that now the oldest packet reaching the other side will not have been sent so late. The sending buffer will randomly drop packets with a probability of <span class="math inline">$1 - \frac{B}{h+k} \times \frac{k}{S}$</span>. In the end, these packets will be sent over to the other side, but they will include packets close to the start of the blue region (above figure) too. So, the inequality for <code>k</code> will now be:</p>
<p><br /><span class="math display">$$
delay\ of\ max\ delayed\ byte = 2\times\frac{h+k}{B} \leq D\\
\Rightarrow k \leq {\frac{DB}{2} - h}
$$</span><br /></p>
<p>Of course, this will worsen our possible wastage ratio at a particular reading speed, since we increased the constraint on the delay.</p>
<h3 id="losses-are-not-allowed">Losses are NOT allowed</h3>
<p>Using the above section’s results (The jerky data loss), we can actually get a solution such that the wastage is 0 (for the case when data is transmitted jerkily).</p>
<p>We need to slow down the sender quite a bit though:</p>
<p><br /><span class="math display">$$s_r = B - \frac{2h}{D}$$</span><br /></p>
<p>So if it is possible to slow down the sender this much (or simply read slowly, helpful in cases when you’re basically sending bytes written by a human, or sending a file), we know how fast we can afford to read. Of course, we could have solved this taking delay as 0 right from the start, but that would deprive us of the observations in the previous section :smile:</p>
<h2 id="conclusion">Conclusion</h2>
<p>Already having spent quite a bit on this article (and now wanting to go back to my other ideas related to networks), I’ll leave this post here, unfinished. There can be quite a few conclusions from this, which would possibly have been written down in some paper or the other for sure. But I believe being so nascent in this field, trying out things on your own has its own charm! Will probably work some more on this if I get time.</p>
</div>

<script src="/js/fb.js"></script>
<div
    class="fb-like"
    data-share="true"
    data-width="450"
    data-show-faces="true">
</div>

<script id="dsq-count-scr" src="//acehack.disqus.com/count.js" async></script>

<div id="disqus_thread"></div>
<script>
 // For debugging
 var disqus_developer = 1;
 var disqus_shortname = 'acehack';
 var disqus_config = function () {
     this.page.url = 'http://acehack.org/2016/09/buffering/index.html';
     this.page.identifier = 'buffering-1';
     this.page.title = 'Buffering packets in a network with a variable source rate';
 };
 (function() {
     var dsq = document.createElement('script'); dsq.type = 'text/javascript'; dsq.async = true;
     dsq.src = '//' + disqus_shortname + '.disqus.com/embed.js';
     (document.getElementsByTagName('head')[0] || document.getElementsByTagName('body')[0]).appendChild(dsq);
 })();
 (function () {
     var s = document.createElement('script'); s.async = true;
     s.type = 'text/javascript';
     s.src = '//' + disqus_shortname + '.disqus.com/count.js';
     (document.getElementsByTagName('HEAD')[0] || document.getElementsByTagName('BODY')[0]).appendChild(s);
 }());
</script>
<noscript>Please enable JavaScript to view the <a href="https://disqus.com/?ref_noscript" rel="nofollow">comments powered by Disqus.</a></noscript>
]]></summary>
</entry>
<entry>
    <title>Pairing up n people into 2 teams</title>
    <link href="https://sakshamsharma.com/2016/09/teamselection/index.html" />
    <id>https://sakshamsharma.com/2016/09/teamselection/index.html</id>
    <published>2016-09-10T00:00:00Z</published>
    <updated>2016-09-10T00:00:00Z</updated>
    <summary type="html"><![CDATA[<div>
    <p>While at <a href="www.mpi-sws.org">MPI</a> during the Summer, a friend (<a href="https://venkatarun.wordpress.com">Venkat</a>) inspired me by presenting some real world algorithm hacks. A few hours later, I found myself playing pool with 3 others, and we tried doing a toss of hands to pair ourselves up into 2 teams. 7 tosses later, we still didn’t have a pairing of 2 each.</p>
<p>This inspired me to think of a way to divide <code>n</code> people into 2 teams using a single random choice by every player.</p>
<h2 id="scenario-and-problem-definition">Scenario and problem definition</h2>
<p>Here are the desired characteristics of such an algorithm:</p>
<ul>
<li>Should require only 1 random computation from each party.</li>
<li>Should return 2 disjoint sets (whose union is the complete group of people) after a trivial (<code>O(n)</code> desired) computation.</li>
<li>If 2 people want to be in the same team, even if they talk beforehand, they must not be able to increase the probability of them being in the same team from more than half.</li>
<li>If 2 people <em>don’t</em> want to be in the same team, even if they talk beforehand, they must not be able to decrease the probability of them being in the same team from more than half.</li>
<li>There should be no need for any external material (like paper slips).</li>
</ul>
<h2 id="candidate-algorithms-and-analysis">Candidate algorithms and analysis</h2>
<p>Some of the candidate techniques are listed here</p>
<h3 id="paper-slip-based-team-ups">Paper slip based team ups</h3>
<h4 id="algorithm">Algorithm</h4>
<p>Make <code>n</code> paper slips, where <code>n/2</code> of them have <code>1</code> written, and the remaining have <code>0</code> written on them. Place them inverted after shuffling, and ask everyone to pick one up each.</p>
<h4 id="pros">Pros</h4>
<ul>
<li>Simple and easy to use</li>
<li>Requires no computation after the initial random choice from each person’s side</li>
</ul>
<h4 id="cons">Cons</h4>
<ul>
<li>Requires use of paper slips, which may not always be at hand</li>
</ul>
<h3 id="random-number-selection">Random number selection</h3>
<p>I would explain this algorithm bit by bit, posing challenges to the algorithm, and proposing workarounds. The issues are listed in the order I had encountered them while analysing the algorithm that fine day.</p>
<h4 id="algorithm-1">Algorithm</h4>
<p>Ask everyone to choose a number between <code>1</code> to, say <code>10*n</code> (10 is just a heuristic choice here, tradeoff between calculation complexity and avoiding collisions). Arrange people in ascending order of their chosen number such that every alternate person is in the same team.</p>
<blockquote>
<p>Collisions can still occur</p>
</blockquote>
<p>Ask every one to stand in a circle before this exercise, and decide on clockwise or anticlockwise direction. Since there are even number of people, use a pre-decided-location dummy person for making the count odd. When two people have the same number, let them be <code>A</code> and <code>B</code>. From <code>A</code> to <code>B</code>, let there be <em>k</em> people, and from <code>B</code> to <code>A</code>, there would be <code>n-k-2-1</code> people. If <em>k &lt;= n-k-3</em>, <code>A</code> gets precedence. This is an easy computation, and can be done in a distributed manner, thus taking up <code>O(n)</code> time for any number of collisions possible.</p>
<blockquote>
<p>People can choose numbers at the extremes to defeat the algorithm</p>
</blockquote>
<p>Take the mean of the numbers chosen (<code>O(n)</code>) and use it to define a mean position to wrap around. Now start counting from the mean position as the <em>0</em> index. This defeats any attempt by anywhere less than <em>n/2</em> people to influence the teams meaningfully, since this adds an influence of the whole group.</p>
<blockquote>
<p>But wait, cyclic order is something like sorting, which is O(n log(n))</p>
</blockquote>
<p>Point taken. But for <em>n</em> humans, perhaps sorting is not a challenge. As for computers, since it is only integers here, which are bounded by a small value, computers can actually use <a href="https://en.wikipedia.org/wiki/Radix_sort">radix sort</a> to sort the numbers in <code>O(n)</code> time.</p>
<blockquote>
<p>People can choose same or numbers differing by 1</p>
</blockquote>
<p>This is harder to defeat. A possible way is the following:</p>
<ul>
<li>Using the cyclic numbering assigned above to each person, everyone multiplies his own number by his position received (this should perhaps be improved to be something like 10 times the position received)</li>
<li>Each person returns the above value modulo <code>10*n</code>.</li>
</ul>
<p>After the above steps, any pair of people won’t know what positions they might get, and how many people will find a numeric value between them after the multiplication and modulo calculation.</p>
<h4 id="pros-1">Pros</h4>
<ul>
<li>No paper needed.</li>
<li>Only <code>O(n)</code> computation needed (if you consider that humans are capable of doing sorting in <code>O(n)</code> time).</li>
<li>Nice theoretical problem to solve :smile:</li>
<li>Mostly individual calculations (except mean calculation and sorting), thus can be done in parallel.</li>
</ul>
<h4 id="cons-1">Cons</h4>
<ul>
<li>Insanely complicated to explain to a group of people :smile:</li>
</ul>
<p>You can actually validate the computations by enforcing that every person also checks the computation of the person having the value just greater than his value (thus ensuring fairness). This way, everyone can do only 3 computations, and the computations can be finished in a distributed manner.</p>
<p>I don’t suppose a computer would want to use this algorithm, since it can always do a random sorting of the list, and select the first <code>n/2</code>. Of course there are easier ways. I believe the sole purpose of this algorithm is to illustrate how one can patch up a bad algorithm to make it work.</p>
<h3 id="central-random-number-choosing-party">Central random number choosing party</h3>
<p>One person is selected randomly, and he turns his back. The remaining people shuffle around into a random order, and he chooses random <code>n/2-1</code> people to be in his team.</p>
<h4 id="pros-2">Pros</h4>
<ul>
<li>Simple and easy</li>
<li>No computation needed</li>
</ul>
<h4 id="cons-2">Cons</h4>
<ul>
<li>If the person chosen is a biased person, he may have it precided with his desired team mates to choose positions towards a certain end.</li>
</ul>
<p>The above <em>con</em> can be defeated to certain extents if the remaining people choose a random 0 index (using a mean of randomly chosen numbers) without telling the random number chooser.</p>
<h2 id="conclusion">Conclusion</h2>
<p>As stated above, the second algorithm seems to be pretty much useless in practical terms, except maybe for a group of people so mathematically inclined. The third algorithm should be enough for normal situations.</p>
</div>

<script src="/js/fb.js"></script>
<div
    class="fb-like"
    data-share="true"
    data-width="450"
    data-show-faces="true">
</div>

<script id="dsq-count-scr" src="//acehack.disqus.com/count.js" async></script>

<div id="disqus_thread"></div>
<script>
 // For debugging
 var disqus_developer = 1;
 var disqus_shortname = 'acehack';
 var disqus_config = function () {
     this.page.url = 'http://acehack.org/2016/09/teamselection/index.html';
     this.page.identifier = 'team-selection';
     this.page.title = 'Pairing up n people into 2 teams';
 };
 (function() {
     var dsq = document.createElement('script'); dsq.type = 'text/javascript'; dsq.async = true;
     dsq.src = '//' + disqus_shortname + '.disqus.com/embed.js';
     (document.getElementsByTagName('head')[0] || document.getElementsByTagName('body')[0]).appendChild(dsq);
 })();
 (function () {
     var s = document.createElement('script'); s.async = true;
     s.type = 'text/javascript';
     s.src = '//' + disqus_shortname + '.disqus.com/count.js';
     (document.getElementsByTagName('HEAD')[0] || document.getElementsByTagName('BODY')[0]).appendChild(s);
 }());
</script>
<noscript>Please enable JavaScript to view the <a href="https://disqus.com/?ref_noscript" rel="nofollow">comments powered by Disqus.</a></noscript>
]]></summary>
</entry>

</feed>
