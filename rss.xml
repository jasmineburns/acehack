<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"
    xmlns:dc="http://purl.org/dc/elements/1.1/">
    <channel>
        <title>AceHack</title>
        <link>https://sakshamsharma.com</link>
        <description><![CDATA[Reveries of a programmer]]></description>
        <atom:link href="https://sakshamsharma.com/rss.xml" rel="self"
                   type="application/rss+xml" />
        <lastBuildDate>Tue, 20 Mar 2018 00:00:00 UT</lastBuildDate>
        <item>
    <title>Using self-signed certificates with ElasticSearch on Scala/Java</title>
    <link>https://sakshamsharma.com/2018/03/es-insecure-http/index.html</link>
    <description><![CDATA[<h2 id="situation">Situation</h2>
<p>If you’re using ElasticSearch, <a href="https://github.com/sksamuel/elastic4s">elastic4s</a> is among the most neat DSLs out there. Recently, ElasticSearch decided to deprecate the Transport client, and remove it from v7.0.0 onwards. This also meant that HTTP Client became the preferred client since v6.0.0.</p>
<p>ElasticSearch also defaults to using SSL for the HTTP connections nowadays. It is also the (non-configurable) default when you’re using <a href="https://github.com/upmc-enterprises/ElasticSearch-operator">ElasticSearch-operator</a> for easy deployment on Kubernetes. What’s worse is that it generates certificates for ES automatically, but doesn’t export the Certificate Authority keys used for the same. Thus, communication with such an ElasticSearch node is only possible in the following methods:</p>
<ul>
<li>Provide your own certificate to the ElasticSearch docker, and trust that certificate’s signing authority manually on your ElasticSearch client.</li>
<li>Use a certificate signed by a well-known CA (LetsEncrypt?).</li>
<li>Somehow manage to configure your ElasticSearch client to allow insecure SSL (do not check for validity of the server certificate).</li>
</ul>
<p>Of course, the first two methods are obviously more secure in the general sense. But if your ES is inside an well-configured Kubernetes cluster, it may be acceptable to use plain HTTP, or use HTTPS with insecure SSL.</p>
<h2 id="elastic4s-httpclient">Elastic4s HttpClient</h2>
<p>Elastic4s provides a <code>HttpClient</code> which is pretty cool and allows you to enable/disable SSL easily.</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode scala"><code class="sourceCode scala"><a class="sourceLine" id="cb1-1" data-line-number="1"><span class="kw">val</span> uri = <span class="fu">ElasticsearchClientUri</span>(s<span class="st">&quot;elasticsearch://${host}:${port}?ssl=${ssl}&quot;</span>)</a>
<a class="sourceLine" id="cb1-2" data-line-number="2"><span class="fu">HttpClient</span>(uri)</a></code></pre></div>
<p>Yet, there is no neat configuration for allowing insecure SSL available right now.</p>
<p>On the bright side, it allows you to pass two other optional variables to the constructor. One of them is <code>httpClientConfigCallback</code>. This is a callback which is called on the HttpAsyncClient’s (underlying class) builder (<code>HttpAsyncClientBuilder</code>). The idea is to use this callback to override the low level socket’s configuration and allow all certificates.</p>
<h2 id="the-code">The code</h2>
<p>The following code can be used to create an ElasticSearch <code>HttpClient</code> which uses insecure SSL.</p>
<div class="sourceCode" id="cb2"><pre class="sourceCode scala"><code class="sourceCode scala"><a class="sourceLine" id="cb2-1" data-line-number="1"><span class="kw">val</span> uri = <span class="fu">ElasticsearchClientUri</span>(s<span class="st">&quot;elasticsearch://${host}:${port}?ssl=${ssl}&quot;</span>)</a>
<a class="sourceLine" id="cb2-2" data-line-number="2"></a>
<a class="sourceLine" id="cb2-3" data-line-number="3"><span class="kw">if</span> (!(ssl &amp;&amp; insecure)) {</a>
<a class="sourceLine" id="cb2-4" data-line-number="4">  <span class="co">// No need to meddle with defaults if secure SSL.</span></a>
<a class="sourceLine" id="cb2-5" data-line-number="5">  <span class="fu">HttpClient</span>(uri)</a>
<a class="sourceLine" id="cb2-6" data-line-number="6">}</a>
<a class="sourceLine" id="cb2-7" data-line-number="7"><span class="kw">else</span> {</a>
<a class="sourceLine" id="cb2-8" data-line-number="8">  <span class="co">// We need an SSL context which trusts self signed certificates.</span></a>
<a class="sourceLine" id="cb2-9" data-line-number="9">  <span class="co">// Somehow this alone is not enough and hostname verifier is needed.</span></a>
<a class="sourceLine" id="cb2-10" data-line-number="10">  <span class="kw">val</span> sslContext = SSLContexts</a>
<a class="sourceLine" id="cb2-11" data-line-number="11">    .<span class="fu">custom</span>()</a>
<a class="sourceLine" id="cb2-12" data-line-number="12">    .<span class="fu">loadTrustMaterial</span>(<span class="kw">new</span> <span class="fu">TrustSelfSignedStrategy</span>())</a>
<a class="sourceLine" id="cb2-13" data-line-number="13">    .<span class="fu">build</span>()</a>
<a class="sourceLine" id="cb2-14" data-line-number="14"></a>
<a class="sourceLine" id="cb2-15" data-line-number="15">  <span class="co">// A hostname verifier which trusts all hostnames in all ssl sessions.</span></a>
<a class="sourceLine" id="cb2-16" data-line-number="16">  <span class="kw">object</span> trustAllHostnameVerifier <span class="kw">extends</span> javax.<span class="fu">net</span>.<span class="fu">ssl</span>.<span class="fu">HostnameVerifier</span> {</a>
<a class="sourceLine" id="cb2-17" data-line-number="17">    <span class="kw">def</span> <span class="fu">verify</span>(h: String, s: SSLSession) = <span class="kw">true</span></a>
<a class="sourceLine" id="cb2-18" data-line-number="18">  }</a>
<a class="sourceLine" id="cb2-19" data-line-number="19"></a>
<a class="sourceLine" id="cb2-20" data-line-number="20">  <span class="co">// We cannot simply use the hostname verifier since the SSL strategy overrides</span></a>
<a class="sourceLine" id="cb2-21" data-line-number="21">  <span class="co">// the hostname verifier when HttpAsyncClient is built.</span></a>
<a class="sourceLine" id="cb2-22" data-line-number="22">  <span class="kw">val</span> sslSessionStrategy = <span class="kw">new</span> <span class="fu">SSLIOSessionStrategy</span>(</a>
<a class="sourceLine" id="cb2-23" data-line-number="23">    sslContext,</a>
<a class="sourceLine" id="cb2-24" data-line-number="24">    trustAllHostnameVerifier</a>
<a class="sourceLine" id="cb2-25" data-line-number="25">  )</a>
<a class="sourceLine" id="cb2-26" data-line-number="26"></a>
<a class="sourceLine" id="cb2-27" data-line-number="27">  <span class="co">// Elasticsearch allows configuring the REST client using this form of callbacks.</span></a>
<a class="sourceLine" id="cb2-28" data-line-number="28">  <span class="kw">val</span> myHttpAsyncClientCallback = <span class="kw">new</span> RestClientBuilder.<span class="fu">HttpClientConfigCallback</span>() {</a>
<a class="sourceLine" id="cb2-29" data-line-number="29">    <span class="kw">override</span> <span class="kw">def</span> <span class="fu">customizeHttpClient</span>(httpClientBuilder: HttpAsyncClientBuilder) = {</a>
<a class="sourceLine" id="cb2-30" data-line-number="30">      httpClientBuilder.<span class="fu">setSSLStrategy</span>(sslSessionStrategy)</a>
<a class="sourceLine" id="cb2-31" data-line-number="31">    }</a>
<a class="sourceLine" id="cb2-32" data-line-number="32">  }</a>
<a class="sourceLine" id="cb2-33" data-line-number="33"></a>
<a class="sourceLine" id="cb2-34" data-line-number="34">  <span class="fu">HttpClient</span>(uri, httpClientConfigCallback = myHttpAsyncClientCallback)</a>
<a class="sourceLine" id="cb2-35" data-line-number="35">}</a></code></pre></div>
<p>You would need the following imports for it (all packages are included with <code>elastic4s</code>):</p>
<div class="sourceCode" id="cb3"><pre class="sourceCode scala"><code class="sourceCode scala"><a class="sourceLine" id="cb3-1" data-line-number="1"><span class="kw">import</span> com.<span class="fu">sksamuel</span>.<span class="fu">elastic4s</span>.<span class="fu">ElasticsearchClientUri</span></a>
<a class="sourceLine" id="cb3-2" data-line-number="2"><span class="kw">import</span> com.<span class="fu">sksamuel</span>.<span class="fu">elastic4s</span>.<span class="fu">http</span>.<span class="fu">settings</span>._</a>
<a class="sourceLine" id="cb3-3" data-line-number="3"><span class="kw">import</span> com.<span class="fu">sksamuel</span>.<span class="fu">elastic4s</span>.<span class="fu">http</span>.<span class="fu">HttpClient</span></a>
<a class="sourceLine" id="cb3-4" data-line-number="4"><span class="kw">import</span> org.<span class="fu">elasticsearch</span>.<span class="fu">client</span>.<span class="fu">RestClientBuilder</span></a>
<a class="sourceLine" id="cb3-5" data-line-number="5"></a>
<a class="sourceLine" id="cb3-6" data-line-number="6"><span class="kw">import</span> javax.<span class="fu">net</span>.<span class="fu">ssl</span>.<span class="fu">SSLSession</span></a>
<a class="sourceLine" id="cb3-7" data-line-number="7"><span class="kw">import</span> org.<span class="fu">apache</span>.<span class="fu">http</span>.<span class="fu">impl</span>.<span class="fu">nio</span>.<span class="fu">client</span>.<span class="fu">HttpAsyncClientBuilder</span></a>
<a class="sourceLine" id="cb3-8" data-line-number="8"><span class="kw">import</span> org.<span class="fu">apache</span>.<span class="fu">http</span>.<span class="fu">conn</span>.<span class="fu">ssl</span>.<span class="fu">TrustSelfSignedStrategy</span></a>
<a class="sourceLine" id="cb3-9" data-line-number="9"><span class="kw">import</span> org.<span class="fu">apache</span>.<span class="fu">http</span>.<span class="fu">nio</span>.<span class="fu">conn</span>.<span class="fu">ssl</span>.<span class="fu">SSLIOSessionStrategy</span></a>
<a class="sourceLine" id="cb3-10" data-line-number="10"><span class="kw">import</span> org.<span class="fu">apache</span>.<span class="fu">http</span>.<span class="fu">ssl</span>.<span class="fu">SSLContexts</span></a></code></pre></div>
<p>Do suggest any changes which might improve the above solution. I have tried using <code>.setSSLContext</code> and <code>.setHostnameVerifier</code>, both fail when exposed to self-signed certificates.</p>]]></description>
    <pubDate>Tue, 20 Mar 2018 00:00:00 UT</pubDate>
    <guid>https://sakshamsharma.com/2018/03/es-insecure-http/index.html</guid>
    <dc:creator>Saksham Sharma</dc:creator>
</item>
<item>
    <title>Calling Golang functions from Haskell</title>
    <link>https://sakshamsharma.com/2018/02/haskell-golang-ffi/index.html</link>
    <description><![CDATA[<p>Calling C from Haskell is easy. Calling Golang from C is easy too. Then why should calling Golang from Haskell be tough? Yet, I could not find a single document / blog on this topic. While doing this, I also explored the possibility domain of library linking in Haskell.</p>
<p>My latest project (in Haskell) required a cryptographic protocol (Verifiable Random Function), whose implementation I could only find in Golang and C. The Golang ones seemed better maintained, self-contained, and understandable. So, I took the easy way out, and wrote a binary using that source code, allowing me to call the binary from Haskell (taking care to marshall the input and output binary data as base64 strings). Of course, this was ugly, and I got a (mostly) satisfying solution working, which did not have to launch a separate process for this simple task.<!--more--></p>
<h2 id="types-of-linking">Types of linking</h2>
<p>There are only a handful of ways to link to a library on Linux systems. The major ones are:</p>
<ul>
<li><code>.so</code>: Shared Object files</li>
<li><code>.a</code>: Archive files</li>
</ul>
<h3 id="shared-objects">Shared Objects</h3>
<p>Shared Objects are dynamically linked libraries, much like <code>.dll</code> files in Windows. Their path is deduced from environment variables / linker arguments, and these are fetched when the binary is run. By default, if you run the binary from a particular directory, that directory is also searched to resolve the library, which is a relief.</p>
<p>These libraries are only loaded in memory once, even if there are <code>n</code> processes running which are linked against that <code>.so</code> file. This is super helpful if the library is something like <code>libc</code>, which is used by a huge number of programs.</p>
<h3 id="archive-files">Archive Files</h3>
<p>These are, unambiguously, archives of binaries. These contain library code which is meant to be linked into a binary during compile time, statically. This is helpful because this lets the binary be standalone to some level, and the user does not have to copy a file along with the binary everywhere. Of course, this has an overhead in terms of file size.</p>
<h2 id="state-of-ffi-in-haskell-and-golang">State of FFI in Haskell and Golang</h2>
<p>Unfortunately, I could not find any material on Foreign Function Interface between Haskell and Golang. What I did find was how to run C from Haskell, and how to run Golang from C. This led to the idea of using a C-compatible intermediate form to mediate between Haskell and Golang.</p>
<h2 id="golang-to-c">Golang to C</h2>
<h3 id="compiling-golang-to-a-c-style-library">Compiling Golang to a C-style library</h3>
<p>Go has an amazing support for such nifty things. <a href="https://stackoverflow.com/questions/32215509">This is the link I followed to get this to work</a>.</p>
<p>In short, you need to modify your source Golang file(s) as follows (almost-verbatim copied from the above linked answer on SO):</p>
<ul>
<li>The package needs to be called <code>main</code>.</li>
<li>A <code>main</code> function must exist, albeit empty.</li>
<li>There needs to be a <code>import &quot;C&quot;</code> statement at the top of the file which has functions to be exported.</li>
<li>Each function that has to be exported, has to have a comment <code>//export &lt;NameToExportAs&gt;</code> <em>exactly</em> above its definition.</li>
</ul>
<p>An example file looks like the following:</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode go"><code class="sourceCode go"><a class="sourceLine" id="cb1-1" data-line-number="1"><span class="kw">package</span> main</a>
<a class="sourceLine" id="cb1-2" data-line-number="2"></a>
<a class="sourceLine" id="cb1-3" data-line-number="3"><span class="kw">import</span> <span class="st">&quot;C&quot;</span></a>
<a class="sourceLine" id="cb1-4" data-line-number="4"></a>
<a class="sourceLine" id="cb1-5" data-line-number="5"><span class="co">//export Testing</span></a>
<a class="sourceLine" id="cb1-6" data-line-number="6"><span class="kw">func</span> Testing(a <span class="dt">int</span>) <span class="dt">int</span> {</a>
<a class="sourceLine" id="cb1-7" data-line-number="7">    <span class="kw">return</span> a+<span class="dv">1</span></a>
<a class="sourceLine" id="cb1-8" data-line-number="8">}</a></code></pre></div>
<p>Now, we need to get a library from this which can be used later. The following commands work: * Generate a shared object: <code>go build -buildmode=c-shared -o lib&lt;LIBNAME&gt;.so *.go</code> * Generate an archive file: <code>go build -buildmode=c-archive -o lib&lt;LIBNAME&gt;.a *.go</code></p>
<h3 id="converting-golang-types-to-c-types">Converting Golang types to C types</h3>
<p>This step is necessary because Haskell does not know about Golang types. The above program is very simple, but what if you had to use strings?</p>
<p>A naive function:</p>
<div class="sourceCode" id="cb2"><pre class="sourceCode go"><code class="sourceCode go"><a class="sourceLine" id="cb2-1" data-line-number="1"><span class="co">//export StrFxn</span></a>
<a class="sourceLine" id="cb2-2" data-line-number="2"><span class="kw">func</span> StrFxn(input <span class="dt">string</span>) <span class="dt">string</span> {</a>
<a class="sourceLine" id="cb2-3" data-line-number="3">    <span class="kw">return</span> <span class="st">&quot;Hello &quot;</span> + input + <span class="st">&quot; World&quot;</span></a>
<a class="sourceLine" id="cb2-4" data-line-number="4">}</a></code></pre></div>
<p>This would generate the following few lines in the file <code>lib&lt;LIBNAME&gt;.h</code>:</p>
<pre><code>...
typedef struct { const char *p; GoInt n; } GoString;
...
extern GoString StrFxn(GoString p0);
...</code></pre>
<p>As you can see, there’s a magical type GoString being used here, which we won’t like later. So we modify the Go code as follows:</p>
<div class="sourceCode" id="cb4"><pre class="sourceCode go"><code class="sourceCode go"><a class="sourceLine" id="cb4-1" data-line-number="1"><span class="kw">import</span> <span class="st">&quot;C&quot;</span></a>
<a class="sourceLine" id="cb4-2" data-line-number="2"></a>
<a class="sourceLine" id="cb4-3" data-line-number="3"><span class="kw">func</span> strFxn(input <span class="dt">string</span>) <span class="dt">string</span> {</a>
<a class="sourceLine" id="cb4-4" data-line-number="4">    <span class="kw">return</span> <span class="st">&quot;Hello &quot;</span> + input + <span class="st">&quot; World&quot;</span></a>
<a class="sourceLine" id="cb4-5" data-line-number="5">}</a>
<a class="sourceLine" id="cb4-6" data-line-number="6"></a>
<a class="sourceLine" id="cb4-7" data-line-number="7"><span class="co">//export StrFxn</span></a>
<a class="sourceLine" id="cb4-8" data-line-number="8"><span class="kw">func</span> StrFxn(cinput *C.char) *C.char {</a>
<a class="sourceLine" id="cb4-9" data-line-number="9">    <span class="co">// C data needs to be manually managed in memory.</span></a>
<a class="sourceLine" id="cb4-10" data-line-number="10">    <span class="co">// But we will do it from Haskell.</span></a>
<a class="sourceLine" id="cb4-11" data-line-number="11">    input := C.GoString(cinput)</a>
<a class="sourceLine" id="cb4-12" data-line-number="12">    <span class="kw">return</span> C.CString(strFxn(input))</a>
<a class="sourceLine" id="cb4-13" data-line-number="13">}</a>
<a class="sourceLine" id="cb4-14" data-line-number="14"></a>
<a class="sourceLine" id="cb4-15" data-line-number="15"><span class="kw">func</span> main() {}</a></code></pre></div>
<p>Now the exported function would behave as if it is just a C function!</p>
<h2 id="load-c-library-from-haskell">Load C library from Haskell</h2>
<p>This is pretty straitforward. Assuming that the linker finds your built library, you write a file like the following:</p>
<div class="sourceCode" id="cb5"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb5-1" data-line-number="1"><span class="ot">{-# LANGUAGE ForeignFunctionInterface #-}</span></a>
<a class="sourceLine" id="cb5-2" data-line-number="2"><span class="co">-- The above PRAGMA used to be required for FFI, but the code</span></a>
<a class="sourceLine" id="cb5-3" data-line-number="3"><span class="co">-- seems to work without it on recent GHC versions.</span></a>
<a class="sourceLine" id="cb5-4" data-line-number="4"></a>
<a class="sourceLine" id="cb5-5" data-line-number="5"><span class="kw">import</span> <span class="dt">Foreign.C.String</span></a>
<a class="sourceLine" id="cb5-6" data-line-number="6"><span class="kw">import</span> <span class="dt">Foreign.Marshal.Alloc</span></a>
<a class="sourceLine" id="cb5-7" data-line-number="7"></a>
<a class="sourceLine" id="cb5-8" data-line-number="8"><span class="co">-- | The call which brings the Foreign function into scope, with manually</span></a>
<a class="sourceLine" id="cb5-9" data-line-number="9"><span class="co">--   declared type. This type is not checked at compile time.</span></a>
<a class="sourceLine" id="cb5-10" data-line-number="10"><span class="co">--   ccall means C-calling-convention, which is usually what you want.</span></a>
<a class="sourceLine" id="cb5-11" data-line-number="11">foreign <span class="kw">import</span> ccall &quot;<span class="dt">StrFxn</span>&quot; go_StrFxn :: <span class="dt">CString</span> -&gt; <span class="dt">IO</span> <span class="dt">CString</span></a>
<a class="sourceLine" id="cb5-12" data-line-number="12"></a>
<a class="sourceLine" id="cb5-13" data-line-number="13"><span class="co">-- | Custom function to make CString-based FFI functions user-friendly.</span></a>
<a class="sourceLine" id="cb5-14" data-line-number="14"><span class="ot">runStrFxn ::</span> (<span class="dt">CString</span> <span class="ot">-&gt;</span> <span class="dt">IO</span> <span class="dt">CString</span>) <span class="ot">-&gt;</span> <span class="dt">String</span> <span class="ot">-&gt;</span> <span class="dt">IO</span> <span class="dt">String</span></a>
<a class="sourceLine" id="cb5-15" data-line-number="15">runStrFxn f input <span class="fu">=</span> <span class="kw">do</span></a>
<a class="sourceLine" id="cb5-16" data-line-number="16">  cinput <span class="ot">&lt;-</span> newCString input</a>
<a class="sourceLine" id="cb5-17" data-line-number="17">  coutput <span class="ot">&lt;-</span> f cinput</a>
<a class="sourceLine" id="cb5-18" data-line-number="18">  res <span class="ot">&lt;-</span> peekCString coutput</a>
<a class="sourceLine" id="cb5-19" data-line-number="19">  _ <span class="ot">&lt;-</span> free cinput</a>
<a class="sourceLine" id="cb5-20" data-line-number="20">  _ <span class="ot">&lt;-</span> free coutput</a>
<a class="sourceLine" id="cb5-21" data-line-number="21">  return res</a>
<a class="sourceLine" id="cb5-22" data-line-number="22"></a>
<a class="sourceLine" id="cb5-23" data-line-number="23"><span class="co">-- | User friendly function for profit :)</span></a>
<a class="sourceLine" id="cb5-24" data-line-number="24"><span class="ot">strFxn ::</span> <span class="dt">String</span> <span class="ot">-&gt;</span> <span class="dt">IO</span> <span class="dt">String</span></a>
<a class="sourceLine" id="cb5-25" data-line-number="25">strFxn <span class="fu">=</span> runStrFxn go_StrFxn</a></code></pre></div>
<p>This was pretty straighforward!</p>
<h2 id="linking">Linking</h2>
<p>The above part was pretty neat and simple. Alas, the linking part is not so. Since we’re trying to link a custom library, it would be nice to be able to link it at compile time, and then forget about it. Yet, some constraints may make it difficult to do.</p>
<p>The following sections are also valid for linking C libraries.</p>
<h3 id="ffi-in-the-haskell-executable-package-the-easy-scenario">FFI in the Haskell Executable package: The easy scenario</h3>
<p>I’ll first begin with the easier solution. If the haskell code requiring the FFI is in your executable source files (and not the library files), you’re in luck.</p>
<p>Let’s assume that your Golang source (as well as the output library) is in <code>./golang</code> folder from the root of your Haskell project.</p>
<h4 id="statically-linking-a-haskell-executable-with-an-archive-file">Statically Linking a Haskell executable with an Archive File</h4>
<p>This is useful if you want your binary to be portable in terms of this Golang library at least.</p>
<p>Your Cabal file would now see the following sections in the section called <code>executable &lt;executable-name&gt;</code>:</p>
<div class="sourceCode" id="cb6"><pre class="sourceCode yaml"><code class="sourceCode yaml"><a class="sourceLine" id="cb6-1" data-line-number="1"><span class="fu">executables:</span></a>
<a class="sourceLine" id="cb6-2" data-line-number="2">  <span class="fu">ffi-exe:</span></a>
<a class="sourceLine" id="cb6-3" data-line-number="3">  ...</a>
<a class="sourceLine" id="cb6-4" data-line-number="4">  <span class="fu">extra-lib-dirs:</span></a>
<a class="sourceLine" id="cb6-5" data-line-number="5">      golang</a>
<a class="sourceLine" id="cb6-6" data-line-number="6">  <span class="fu">extra-libraries:</span></a>
<a class="sourceLine" id="cb6-7" data-line-number="7">      &lt;LIBNAME&gt;</a>
<a class="sourceLine" id="cb6-8" data-line-number="8">  <span class="fu">ghc-options:</span></a>
<a class="sourceLine" id="cb6-9" data-line-number="9">  <span class="kw">-</span> -threaded</a>
<a class="sourceLine" id="cb6-10" data-line-number="10">  <span class="kw">-</span> -optl-static -optl-pthread</a>
<a class="sourceLine" id="cb6-11" data-line-number="11">  <span class="kw">-</span> ....</a></code></pre></div>
<p>Note that there might be many other <code>ghc-options</code> already.</p>
<h4 id="dynamically-linking-a-haskell-executable-with-a-shared-object-file">Dynamically Linking a Haskell executable with a Shared Object File</h4>
<p>Your Cabal file would now see the following sections in the section called <code>executable &lt;executable-name&gt;</code>:</p>
<div class="sourceCode" id="cb7"><pre class="sourceCode yaml"><code class="sourceCode yaml"><a class="sourceLine" id="cb7-1" data-line-number="1"><span class="fu">executables:</span></a>
<a class="sourceLine" id="cb7-2" data-line-number="2">  <span class="fu">ffi-exe:</span></a>
<a class="sourceLine" id="cb7-3" data-line-number="3">  ...</a>
<a class="sourceLine" id="cb7-4" data-line-number="4">  <span class="fu">extra-lib-dirs:</span></a>
<a class="sourceLine" id="cb7-5" data-line-number="5">      golang</a>
<a class="sourceLine" id="cb7-6" data-line-number="6">  <span class="fu">extra-libraries:</span></a>
<a class="sourceLine" id="cb7-7" data-line-number="7">      &lt;LIBNAME&gt;</a>
<a class="sourceLine" id="cb7-8" data-line-number="8">  <span class="fu">ghc-options:</span></a>
<a class="sourceLine" id="cb7-9" data-line-number="9">  <span class="kw">-</span> -threaded</a>
<a class="sourceLine" id="cb7-10" data-line-number="10">  <span class="kw">-</span> -dynamic</a>
<a class="sourceLine" id="cb7-11" data-line-number="11">  <span class="kw">-</span> ....</a></code></pre></div>
<p>This will allow the code to compile, but running poses an issue.</p>
<pre class="shell"><code>$ stack exec ffi
/home/saksham/code/ffi/.stack-work/install/x86_64-linux/lts-10.5/8.2.2/bin/ffi-exe: error while loading shared libraries: libmytest.so: cannot open shared object file: No such file or directory</code></pre>
<p>There is an extra step involved in this case. The generated binary somehow does not want to look in the <code>golang</code> folder, and you need to bring the library into the current folder. You could either move it to the project root, or you could run <code>ln -sf mytest.so .</code> to create a soft link to the library in the project root.</p>
<h3 id="ffi-in-the-haskell-library-the-difficult-scenario">FFI in the Haskell Library: The difficult scenario</h3>
<p>What if you want to do a FFI call inside a Haskell library you’re writing? This gets tricky, since <code>ghc-pkg</code> does not like relative paths in <code>extra-lib-dirs</code>, but this is only when those paths are in the <code>library</code> section. Using them in <code>executables</code> seems to work just fine, as we saw in the section above.</p>
<h4 id="dynamically-linking-a-haskell-library-with-a-shared-object-file">Dynamically Linking a Haskell Library with a Shared Object File</h4>
<p>This seems to work in almost the same manner as the Linking-a-Haskell-Executable-with-A-Shared-Object. See the above section for details on how to do this.</p>
<p><em>Fun Fact</em>: You do not even need to add the <code>extra-libraries</code> to the <code>library</code> section, even though the Haskell library is the one depending on shared object. Since the library is loaded at run time (dynamically), the binary will find <code>libmytest.so</code> during startup. Thus, there is no point in it knowing the dependency during compile time.</p>
<p><em>Fun Fact 2</em>: Moving the <code>extra-libraries</code> and <code>extra-lib-dirs</code> to the <code>libraries</code> section seems to actually break the build. For reasons, refer to the next section.</p>
<h4 id="statically-linking-a-haskell-library-with-an-archive-file">Statically Linking a Haskell Library with an Archive File</h4>
<p>This is a case which does not work nicely with relative paths. Any help in this regards would be appreciated. Anyhow, this is what I could understand about this:</p>
<ul>
<li>The Haskell library depends on the archive file placed in the project root (for simplicity).</li>
<li>The user wants the build program to find the archive file during build, and statically link during compile time, to keep the binary portable.</li>
<li>The ideal scenario would be to add <code>-optl-static -optl-pthread</code> to ghc-options, and provide a relative path (<code>.</code>) in the <code>extra-lib-dirs</code> key of the library configuration in the build file. Or, maybe, allow us to provide a <code>-L.</code> flag to the build tool, or a similar flag to the linker. None of these works.</li>
<li>Somehow, somewhere in time, someone thought that relative library paths should be forbidden during build time. As far as I could trace right now, this appears to be an issue in <code>ghc-pkg</code>.</li>
<li>The above behavior is different in the cases of building a haskell executable and a haskell library. This makes me think that this behavior is buggy.</li>
<li>IMHO, relative build-time library paths should be allowed, because of such a use case for FFI.</li>
</ul>
<p>So, currently, I could not find a way to statically link an archive placed in the project folder, to a haskell library. Things may change in the future, as I plan to pursue this as a bug. If you know of a way to get this done, do point it out in the comments below.</p>
<p>A very relevant (but old) discussion can be found <a href="https://github.com/haskell/cabal/issues/1317">here</a>.</p>]]></description>
    <pubDate>Sat, 10 Feb 2018 00:00:00 UT</pubDate>
    <guid>https://sakshamsharma.com/2018/02/haskell-golang-ffi/index.html</guid>
    <dc:creator>Saksham Sharma</dc:creator>
</item>
<item>
    <title>Things no one told me about EFI</title>
    <link>https://sakshamsharma.com/2017/11/bootloaderefi/index.html</link>
    <description><![CDATA[<p>About one and a half years later, I finally thought it is time to reinstall Windows for completeness sake (don’t judge me please). Little did I know that I would be opening a pandora’s box.</p>
<p>So I never really understood the concept of EFI, or the difference between BIOS/UEFI; and yet, I have played around with bootloaders for quite a while now. I somehow managed to survive <!--more--> by trying all possible variants of grub commands, every time. This caused more havoc on my hard disk than I knew.</p>
<p>So, here’s what I learnt later, once everything was fixed:</p>
<h2 id="efi-vs-legacy">EFI vs Legacy</h2>
<p>Legacy bootloaders reside in some bytes at the beginning of each partition. During legacy boot, the BIOS reads data off the start of each partition.</p>
<p>Instead, in the case of EFI, there’s supposed to be a single partition on your hard disk, which contains all the bootloaders. The BIOS is configured to read data from this partition.</p>
<p>Now, it is recommended to have only one EFI partition. I had 3 at some point, somehow, and it caused quite a few troubles while installing Windows.</p>
<h2 id="how-does-an-efi-installation-work">How does an EFI installation work?</h2>
<p>We first need to see how Linux boot works. The bootloader’s job is to load up the Linux kernel. Grub usually has a configuration which stores some preset ways to load into your well-settled installations, but here’s what actually happens. You can boot using these steps to boot using grub a grub shell:</p>
<pre><code>&gt; insmod ext2
 &gt; set root=(hd0,gpt5)
 &gt; linux /vmlinuz-4.10.4-generic root=/dev/sda6 init=/usr/lib/systemd/systemd
 &gt; boot</code></pre>
<p>Let’s see some step by step explanations:</p>
<ol type="1">
<li>We need to load the ext2 module for this (don’t ask me why).</li>
<li>This <em>root</em> that we mention here, that’s the partition where <code>/boot</code> is often mounted. The strict requirement is that this partition should have the linux kernel (<code>vmlinuz-&lt;something&gt;</code>). It may be your root partition, or the one where you mount <code>/boot</code>.</li>
<li>We specify the kernel we want to use. There are a couple of arguments:
<ol type="1">
<li>Notice how the path used is <code>/vmlinuz-...</code>. The path is relative to the root mentioned in step 2. It would’ve been <code>/boot/vmlinuz-...</code> if you don’t have a separate boot partition.</li>
<li>The root variable (a different one, you say?) is now set to the location of your <strong>root</strong> partition.</li>
<li>I chose to set <code>init</code> to systemd, since I use Gentoo and it defaults to OpenRC. You may not need this.</li>
</ol></li>
<li>Boot. Profit.</li>
</ol>
<p>The take-away is that the booting pretty much involves providing a kernel, and a root partition.</p>
<p>Now how did the bootloader start up? Inside your EFI partition, there shall be a binary of the type: <code>/EFI/&lt;your-os-name&gt;/grub64x.efi</code>. That’s how BIOS finds the bootloader.</p>
<h2 id="things-i-learned">Things I learned</h2>
<p>Well, so ideally, for a EFI installation, here’s some things you need to keep in mind.</p>
<ul>
<li><p>Make sure there’s only one EFI partition. Open up gparted, and look at the partitions with the <code>esp</code> flag set. <strong>ESP</strong> stands for <strong>EFI System Partition</strong>. If there are other partitions than the one you’d want to be your EFI partition, you should unset the <code>esp</code> flag on those.</p></li>
<li><p>Grub configuration is created using <code>grub-mkconfig -o /boot/grub/grub.cfg</code>. Now, your kernel, grub configuration, and any other bootloader-specific things should stay in the same partition.</p></li>
<li><p>Now about installation of the bootloader into the EFI partition. Grub defaults to the assumption that you have mounted the ESP at <code>/boot/efi</code>. So if that’s done, you can simply use <code>grub-install</code> and it should automatically copy the <code>.efi</code> file to the correct location. Otherwise, you can point to the installation location (it has <code>/EFI/&lt;bootloader-names&gt;</code> directories). The way to do it is <code>grub-install --efi-directory=/place/where/you/mounted/EFI</code>.</p></li>
<li><p>I was under the impression that my hard disk was using a GPT partition table. Well, it was using MBR. I first converted it to GPT (no data loss usually), after which the remaining pieces fell into place, and I could finally proceed with my Windows installation without much issue.</p></li>
<li><p>If you already have a few partitions, don’t create the partition for the windows installation from the windows installer. It creates lots of wasteful extra partitions (I had most of them already, due to this being a reinstallation). I created an NTFS partition manually for Windows using parted on Linux.</p></li>
</ul>]]></description>
    <pubDate>Mon, 27 Nov 2017 00:00:00 UT</pubDate>
    <guid>https://sakshamsharma.com/2017/11/bootloaderefi/index.html</guid>
    <dc:creator>Saksham Sharma</dc:creator>
</item>
<item>
    <title>Interning at Google Seattle</title>
    <link>https://sakshamsharma.com/2017/08/googleintern17/index.html</link>
    <description><![CDATA[<style>
#container {
    text-align: center;
}
a, figure {
    display: inline-block;
}
figcaption {
    margin: 10px 0 0 0;
    font-variant: small-caps;
    font-family: Arial;
    font-weight: bold;
    color: #bb3333;
    text-align: center;
}
figure {
    padding: 5px;
}
</style>
<p>Now that I’m back from the US, the extravaganza that is Google, reminiscing back to those days has made me finally decide to pen down my experience in the Cloud city, working on Cloud.</p>
<p>For context, I interned at Google Seattle, the third largest Google office in the US. The Seattle <!--more--> area is home to Amazon and Microsoft’s sprawling offices. Microsoft, Amazon and Google (in that order) being the biggest players in the cloud market these days, Seattle has somehow become, what you could call, “the cloud city”.</p>
<p>I remember how I was completely unaware of the huge tech industry in Seattle, back in December when I accepted this internship offer. That part, my interviews and how I chose to go to Google, is another story, one that’s written <a href="/2016/12/internsaga" target="_blank">here</a>.</p>
<p>But coming back to today, how was my intern, you ask? Well, I’ll let the words do the talking (what other option do I have?).</p>
<h2 id="the-letter-from-hogwarts">The letter from Hogwarts</h2>
<h4 id="birthday">Birthday</h4>
<p>By the end of December, I’d signed my offer letter and was preparing my documents for a speedy visa process. Apparently things don’t move as fast as you’d want, and Google only got my documents ready by mid March. I visited Delhi early April for my visa biometrics and interview. Yes, Indians need to interview for an American visa.</p>
<p>Anyway, I was all set for flying to San Jose, US, around mid of April. I was going to Hogwarts!</p>
<h4 id="hogwarts">Hogwarts</h4>
<p>Since I was interning at the west coast of the US, I got to attend the orientation at the Mountain View (MTV) campus of Google, which is also the largest Google campus in the world.</p>
<p>I felt like a character sprung out of the first Harry Potter book, marvelling at the campus as if it was Hogwarts. The MTV campus is gigantic, and almost feels like a city. Walking around it would take hours, if not a full day; and thus you can find bicycles called GBikes lying around the campus. There’s also a cab service which can pick you up and drop you anywhere in campus.</p>
<p>There are more than 40+ Google cafes in the South Bay Area region. Google offers free meals 3 times a day to all employees at these cafes. And mind you, the food is delicious!</p>
<p>Fun fact, you can access the map of the campus on the internal link <code>disneylandmap</code>. The buildings with slides to move among floors, sports grounds, random pianos in halls, free food every few yards, hidden game rooms; yes all that is true, and more.</p>
<figure>
<img src="/images/google17/hogwarts.jpg" style="width:100%;"/>
<figcaption>
Hogwarts!!!
</figcaption>
</figure>
<h2 id="my-chronicles-in-america">My Chronicles in America</h2>
<p>I’m the kind of person who loves to visit places, and not just enjoy the commercial things available in city. Seattle is an awesome place for that matter. Not only is the city fun and full of things to do, the surrounding countryside is magnificent. I knew how to drive, and had friends who did too, so we rented a car every weekend, to go exploring the nearby natural extravaganza. Oh right, renting a car as a Googler is cheap, very cheap. Even when you’re under-21, like I was. And by a car, I mean nice full-size sedans.</p>
<figure>
<img src="/images/google17/disneyland.jpg" style="width:100%;"/>
<figcaption>
Disneyland!!!
</figcaption>
</figure>
<p>Here’s most of the stuff I did in the US, compiled into a list to the best of my memory:</p>
<ul>
<li>May 8 to 12: Explored the Mountain View campus for a week, during my orientation.</li>
<li>May 11: Visited San Francisco for about 6 hours. Hey don’t judge, we had a hectic schedule during orientation.</li>
<li>May 20: Hiking at Mt. Rainer. This was a Google sponsored intern event, and was incredibly fun.</li>
<li>May 21: Explored Seattle with a friend. Seattle’s nice!</li>
<li>May 26-29: Rented a Nissan Altima with 2 friends and drove all the way to California! This was my first road trip, and we drove on the US101, which is a highway on the Pacific Ocean coastline. We visited lots of beaches on the way, crossed Oregon into California, before turning back for a drive back on the Interstate-5. Total ~1200 miles.</li>
<li>May 29-30: First (and last) time staying overnight in the office. Yeah, we have beds, toothbrushes etc in office :)</li>
<li>Jun 4: Hike to Rattlesnake ledge with interns. Another Google sponsored intern event.</li>
<li>Jun 7-8: Visited Sunnyvale, California for the GKE/Kubernetes team’s annual team summit.</li>
<li>Jun 9-11: Rented a cabin in the Wenatchee forest, barbecued in the woods, drove a motorboat in Lake Chelan, and visited plenty of other nearby places on this awesome weekend.</li>
<li>Jun 18: Drove to Snoqualmie falls. Drove near and hiked to the Big 4 snow caves.</li>
<li>Jun 24: Went to Portland for a day trip.</li>
<li>Jul 1-4: Long weekend in Los Angeles! Visited Universal Studios and Disneyland while I was there. Also did a day trip to San Diego, before coming back to LA to watch the 4th of July fireworks.</li>
<li>Jul 8: Rented a pickup-truck and drove to Sequim, a nearby town which was supposed to have Lavenders, <em>in a different season</em> ( :( ).</li>
<li>Jul 14-15: Drove all around the Olympia National Forest and visited the Northwestern-most part of US mainland.</li>
<li>Jul 16: Attended a Microsoft-organized boat party for interns with friends.</li>
<li>Jul 21: Google Washington Picnic!</li>
</ul>
<p>Okay that’s a long list. To be honest, (a) I wanted to write it down for my own record, and (b) that wasn’t from my memory, I looked up my Google Photos uploads :)</p>
<h2 id="the-seattley-hollow">The Seattley Hollow</h2>
<h4 id="hogsmeade">Hogsmeade</h4>
<p>Seattle is a nice city. It is not huge, or overly populated, but has a lot of things a person would enjoy.</p>
<ul>
<li>The city-center (which isn’t really in the center) with the Space Needle and the Pacific Science Center is a nice place to chill out and relax on the weekend.</li>
<li>The Pike Place area is the place to go for the Seattlite experience, and also for the best fish in town.</li>
<li>Gas works park offers an incredibly pleasant view of the Lake Union area.</li>
<li>Greenwood lake is a fun place to go kayaking on a weekend.</li>
<li>The neighboring cities of Bellevue and Redmond are majority tech cities. They’re 30-45 minutes by public transport, and you can find lots of fun things to do there as well.</li>
</ul>
<figure>
<img src="/images/google17/motorboat.jpg" style="width:100%;"/>
<figcaption>
Driving on roads is just one form of driving
</figcaption>
</figure>
<p>There’s plenty of more places I wanted to visit, but did not. I didn’t really explore Seattle a lot, actually. There were escape rooms, sky-scraper observation decks, landmark buildings, museums etc like any other city, whatever floats your boat.</p>
<p>More importantly, the public transport is almost as good as you could hope for in the US. Google also gives a free public transport pass, so travelling around the city is a breeze.</p>
<h4 id="the-workplace">The workplace</h4>
<p>To be honest, I was pleasantly surprised by the Seattle office. I had not expected a fully-fitted Google office which a huge lot of teams working on meaningful things, but that’s what I found. Its a 5-building complex in one of the most pretty areas of Seattle, and had almost every thing which is actually useful in an office. There were plenty of things which brought-out the Googleyness of the office too, like the sleeping area hidden behind a library bookshelf, or the Kayak shaped tables in the cafe called Kayak, or mini-recreations of landmarks in Seattle.</p>
<p>The free and awesome food is a common denominator in all of Google’s offices I believe, and Seattle was no different. The nearby Kirkland office in the suburbs was even more Googley.</p>
<p>The Seattle-Kirkland offices combined are the 3rd largest Google offices in the US, with about 2000 employees working on major teams like Cloud, Maps, Chrome among other things. There’s expansion plans which would see Google opening a <em>huge</em> new campus in the South Lake Union area nearby by 2019.</p>
<h2 id="lord-of-the-cloud">Lord of the cloud</h2>
<p>This chit-chat somewhat distracted me from my project. As I said, Seattle happens to be the cloud city, and no wonder Google’s Cloud team is there too. I was a part of the GKE/Kubernetes Security team. A bit of description:</p>
<ul>
<li>Docker container: A small sandbox which can run a service (database, web services etc) independently across systems.</li>
<li>Kubernetes: Google’s Open-Source software for managing, scaling, load-balancing docker containers. It is the most popular and used such docker orchestration project.</li>
<li>GKE: Google Container Engine. A Google-managed instantiation of Kubernetes which handles automatic upgrades, cluster lifecycle etc.</li>
<li>Security: Oh come on, every cluster requires security features :) The team mostly works on security hardening features in Kubernetes and GKE.</li>
</ul>
<p>My project was almost entirely about working in Kubernetes, the open source part. Kubernetes uses etcd as the database to store cluster specific information. More importantly, it contains secrets which ought to be confidential. For example, security certificates, passwords, private keys etc.</p>
<p>My project had 2 parts:</p>
<p>The first part was to encrypt those secrets in the database. This involved a layer before the database calls, which would encrypt data before writing, and decrypt data after reading. This also involved adding the configuration options for this feature necessary for this feature to be released in Kubernetes v1.7, whose features had to be freezed at the end of May. That was a very tight deadline, and I barely made it, with half an hour left to go.</p>
<p>The second part was to integrate the above part with Cloud based encryption-decryption services (called KMS, Key Management Service). Since sending large data for encryption/decryption over a network is not practical and advisable, we use a scheme called envelope encryption, which uses two keys, a Key-Encryption-Key and a Data-Encryption-Key. There were many more concerns, especially about exposing key rotation and management to the user. The end result was to finish integration with Google’s in-house Cloud KMS by Kubernetes v1.8.</p>
<h2 id="a-song-of-open-source-and-programming">A Song of Open-Source and Programming</h2>
<p>Apparently, open source and programming don’t work so well in practice. At least not as well as I had hoped, in my utopian dreams of working in a large open source organization.</p>
<p>You see, Kubernetes is a large organization, involving a large number of companies and contributors. That means it has a certain bureaucratic feel and structure. There’s plenty of contributors, but only a handful of ‘approvers’. The 2nd part of my project got stuck in reviews, which were awfully slow because the approvers, I quote:</p>
<blockquote>
<p>have the misfortune of knowing everything about Kubernetes, and thus get called to every meeting and review</p>
</blockquote>
<p>I would often wait 2-3 days before getting a comment from one reviewer among the 10-15 ones assigned. That would give me time to implement features which wouldn’t even be put up for review until my previous changes went in. One particular Pull Request, for instance, had 100+ comments, 14 participants and 11 reviewers, and at the time of writing, has been up since a month. Dozens of meetings and discussions later, I split up the PR into two, and the more controversial half got approved within a day. Things are strange in open source, more so than I thought.</p>
<p>Although I immensely enjoyed working on Kubernetes, the reviews were the sour in the sweet, so to say. But to be honest, I’m much more careful about my code since then, and have drastically improved in communicating with reviewers and negotiating on approaches.</p>
<p>This internship made me realize that programming is not just about coding. Talking about requirements and solutions occupies a major chunk of the work.</p>
<h2 id="adios">Adios</h2>
<p>After 12 weeks, the day I left Seattle was sad. Dropping in my Google badge on the final day, one last card game, hugging my friends goodbye, packing up my stuff into luggage bags; I heard melancholy music all day long.</p>
<figure>
<img src="/images/google17/meatmydesk.jpg" style="width:100%;"/>
<figcaption>
Me at my desk
</figcaption>
</figure>
<p>Waking up from this reminiscing exercise, I’m back in IIT Kanpur, and life’s back to the usual old grind. USA is a fun memory for at least an year now.</p>
<p>The bottomline? Google US was awesome and I had a really good time. Thanks for the memories!</p>]]></description>
    <pubDate>Sat, 05 Aug 2017 00:00:00 UT</pubDate>
    <guid>https://sakshamsharma.com/2017/08/googleintern17/index.html</guid>
    <dc:creator>Saksham Sharma</dc:creator>
</item>
<item>
    <title>Limiting 'likes' sent anonymously - Part 3</title>
    <link>https://sakshamsharma.com/2016/12/puppy3/index.html</link>
    <description><![CDATA[<h3 id="recap">Recap</h3>
<p>For those who haven’t read the previous posts <a href="/2016/10/puppy1/">part 1</a> and <a href="/2016/11/puppy2/">part 2</a>, this is a challenge which came up while trying to develop a secure version of a platform called <em>Puppy Love</em><!--more-->. The introduction and the algorithmic challenge, taken from the previous 2 articles:</p>
<p>The queerly named <em>Puppy Love</em> platform has been running in my university since 2014, meant to help shy nerds meet their crush, made my the Programming Club (of which, I happen to be the current coordinator). The platform opens 1 week prior to the Valentine’s Day every year, and let’s people choose up to 4 of their crushes, encrypting their choices with their password. At the stroke of the midnight hour, everyone logs back, and their choices are decrypted, and are then matched to other people’s choices. Only the people who matched are informed about it. If your <em>love</em> was unrequited (the other person didn’t like you), you will not get to know. More importantly, if you did not like the other person, you would not know if that person liked you or not.</p>
<h3 id="limiting-your-likes-the-challenge">Limiting your likes: The challenge</h3>
<p>In part 2, we ensured that the server would not get to know the individual choices of the users, and would only know if both of the parties <em>matched</em>. There still exists, an issue with this. Since the server has no idea about your choices, it cannot prevent you from sending a <em>like</em> to everyone you know. Theoretically, you could send one to everyone, and basically find out who likes you. Of course, this comes with the additional baggage of having to explain to the person that you actually cheated and do not like them back.</p>
<p>Interestingly, while solving this issue, I ended up with a solution which reduced the compution and data needed by almost half. The solution used to restrict choices to 4 will also let the server match people.</p>
<h3 id="updated-algorithm">Updated algorithm:</h3>
<p>Here is a possible solution to this challenge. To explain that, I shall go over the needed part of the algorithm (taken from Part 2):</p>
<ul>
<li>Both parties have public and private key pairs.</li>
<li>Each party sends a random token to the other party (call these strings <em>t0</em> and <em>t1</em>).</li>
<li>The server will not know the these values due to asymmetric encryption.</li>
</ul>
<p>When the user wants to submit, he/she will look at each of his/her choices, and fetch the corresponding token values. Let them be <em>t0</em> and <em>t1</em>. Now, the user will send the value of <code>hash(t0-t1)</code> to the server (it can be any non-invertible function of the tokens). The user can send up to 4 such values to the server (can be checked on the backend).</p>
<p>In case 2 people like each other, the values they send will be exactly the same (because the ordering of t0 and t1 is decided by their roll numbers). The server can simply sort the list in the end, and inform all people whose values matched. The matching is accomplished!</p>
<p>The server will not find out your choices if there was no match. Profit.</p>
<h4 id="the-old-algorithm-for-this-deprecated">The old algorithm for this (deprecated)</h4>
<p><strong>Note</strong>: This section is very similar to the above, but contains steps not needed anymore.</p>
<p>Here is a possible solution to this challenge. To explain that, I shall go over the needed part of the algorithm (taken from Part 2):</p>
<ul>
<li>Both parties have shared secret values A and B. These are not known to Eve by virtue of public key encryption.</li>
<li>Parties agree to this protocol:
<ul>
<li>Alice sends value <code>a = A</code> to Eve if she likes Bob.</li>
<li>Alice sends value <code>a = random</code> to Eve if she does not like Bob.</li>
<li>Bob sends value <code>b = B</code> to Eve if he likes Alice.</li>
<li>Bob sends value <code>b = random</code> to Eve if he does not like Alice.</li>
</ul></li>
<li>Eve receives <code>a</code> and <code>b</code>. She stores <code>hash(a*b)</code> as result.</li>
<li>Alice and Bob manually compute <code>hash(A * B)</code>, and send it to server (server can verify malicious behavior if they don’t match)</li>
<li>It is a match only if the result and the expected value by both parties are the same.</li>
</ul>
<p>Note here, that the server shall not find out more than one of A, B if the two parties did not match. But if they match, this would be a cue for the server that there was a match. Now, this is a good point to ensure that both the users did not send more than 4 likes, and this match, indeed, was expected. Here is a sketch of how this could be done:</p>
<ul>
<li>Once you finalize your choices, you need to inform the server about them in a way that it cannot find out unless that choice actually matched.</li>
<li>If your likes are <em>m1</em>, <em>m2</em>, <em>m3</em> and <em>m4</em>, assume that the negotiated values <code>A</code> and <code>B</code> are: <em>A1</em>, <em>B1</em> and so on.</li>
<li>You send the value <code>AES_enc('m1')</code> encrypted with a password <code>A1-password-B1</code> or some other function of both <code>A1</code> and <code>B1</code>.</li>
<li>The server shall accept only 4 of such terms.</li>
<li>When the server detects a match, it shall look up in the list of terms you sent, and try decrypting them, to ensure that this particular match was among the 4 you had expected. It should ideally find exactly one term which gets decrypted.</li>
<li>If there is a match which was not intended, it is simply dropped.</li>
</ul>
<p>This way, only 4 of your likes can actually result in matches. The server still cannot detect your choices. Profit <code>:)</code></p>]]></description>
    <pubDate>Mon, 26 Dec 2016 00:00:00 UT</pubDate>
    <guid>https://sakshamsharma.com/2016/12/puppy3/index.html</guid>
    <dc:creator>Saksham Sharma</dc:creator>
</item>
<item>
    <title>My internship interview saga</title>
    <link>https://sakshamsharma.com/2016/12/internsaga/index.html</link>
    <description><![CDATA[<p>So, after months of worrying, I had finally landed an internship position at Google Seattle, in the team of my choice. But before I could stop being lazy and sign the offer letter, something happened <!--more--> which made every remaining day of that offer letter an exercise in surviving confusion. But before that, let’s go to the start.</p>
<p>Disclaimer:</p>
<blockquote>
<p>This article is going to be long, and flaky. I wrote this to clear up my brain, the very day this whacky process finished. Putting it up in case it can help someone.</p>
</blockquote>
<p><br> Disclaimer 2:</p>
<blockquote>
<p>There might be some parts in this which seem accusatory. I tried my best to simply state the facts. If something seems wrong, please understand that it was not intended.</p>
</blockquote>
<h3 id="campus-internships">Campus internships</h3>
<p>I had landed back from Germany after my summer internship, and faced the immediate prospect of facing the upcoming campus internship season, where you have to sit for a bazillion interviews in a single day. I had this extra pressure of so-called ‘living up to my own expectations’. I had liked my internship in Germany, and would at least want something as good. But being underprepared as I was, and hoping that I could later prepare, and sit for off-campus internships abroad, I left things there, and did not apply for a single company.</p>
<p>I saw all my friends land handsome interns, and, well … It isn’t too easy, having to sit with uncertainity. Some of them actually landed really nice internships. At one point, I actually regretted not sitting for the interviews.</p>
<h3 id="first-rejection-or-was-it">First rejection (or was it?)</h3>
<p>But after 2-3 weeks, somehow Google India showed up on the internship portal. I was quite double minded about that, but somehow applied. My initial plan was to <em>upgrade</em> this offer to a Google US offer, but later learned that was not possible. Of all the things in the world that could have happened, they did not even shortlist my CV for an interview. This was unexpected, because (I thought) I had a great CV. Many people have told me that my CV showed interest in research, and they might have thought that I would leave the internship. I personally think it just got overlooked, or maybe it was actually bad. Did not really count as an interview rejection, but had to some how survive the disappointment that creeped up. This is not how I would have expected my first application to go.</p>
<h3 id="second-rejection-or-was-it">Second rejection (or was it?)</h3>
<p>Anyhow, come September, I had applied to Palantir through a referral, and gave their coding test. That’s when I realized, how bad my interview skills were. I had never prepared for interviews, and suddenly it did not seem easy. This was a jolt to me, and no wonder, I got dropped there and then, in the Palantir process.</p>
<p>I took this one a bit more positively though, and started practicing competitive programming again. This was not the ideal thing to do, I think in hindsight, but at least it got me started.</p>
<p>Again, this wasn’t an interview rejection <code>:)</code></p>
<h3 id="google">Google?</h3>
<p>I got referred for Google North America around early October, and heard back in about 2 weeks. I had my interviews scheduled for early November. I still did not practice coding for interviews, and rather focused a bit too much on algorithms. And thus, my preparation was lack-luster to say the least. 24 hours before my interview, I realized that I had once planned to solve the book <em>Cracking the coding interview</em>. It was absolutely hooking, and I regretted not solving it early on. I spent the remaining time going through the whole book. If you’re reading this for some tips (wrong place, buddy), that was wrong too. I should have coded. But I found that out pretty soon.</p>
<h4 id="the-interviews">The interviews</h4>
<p>My first interview went horribly. The interviewer could not understand most of the stuff I said, and somehow a misunderstanding led me to code a solution for a slightly different problem, which he later pointed out. The interview ended with him thinking I did not get the correct code on time. Yes, I did not finish even a single question.</p>
<p>The second interview put some confidence in me though. The phone line was better, and I managed to complete the question, as well as chat for 5 minutes after that. In hindsight, I should have solved 2 questions, judging by interviews of my friends, but I was happy to have not left any clear sign of under-performance.</p>
<p>After this, I assumed that I shall be rejected. 2 of my friends whose interviews went on nicely, they got called for a third interview. In my opinion, my interviews went horribly.</p>
<h4 id="result">Result</h4>
<p>Well, I got put into the host-matching phase directly. I have no idea till date, as to why this happened. Perhaps CV and my approach to the problem saved the day. This was the night before my most important final exam in college, and this helped cheer me up.</p>
<p>So now, I was in the host matching phase. For those who do not know, this means that Google would put up my CV for project hosts, and they can interview me if they like my profile. If I did not get matched within 6 weeks, my process would be terminated. Some people got offers with a guaranteed project. I do not have any first or second hand information on this, but I assume this depends on your interview performance.</p>
<h3 id="facebook">Facebook</h3>
<p>A few days before my Google interview result, I applied for Facebook through a referral. What else would someone do, who is expecting to be rejected by one big company? I also applied to a handful of other companies, Microsoft Redmond, Microsoft Research, VMWare, Cisco to name a few. They never got back to me, despite referrals from employees.</p>
<p>The Facebook recruiter arranged for an interview at the end of November, which was pretty late. Before that interview, a friend put me in touch with a good friend of his, who would be interning at Facebook London this summers. This super-enthusiastic dude actually offered to give me mock interview practice. I flunked this one too. Managed to barely solve 1 problem in this interview, where I should have been able to do 2 due to the nature of the problem. This was when I had less than 24 hours left for my interview.</p>
<p>I resolved that I would definitely put in my best, and I picked up <em>Cracking the coding interview</em> again. Somehow, I realized that what went wrong is that I have never solved coding problems for practice. I put in all the time I could, and solved most of the important chapters of the book for practice. But importantly, I actually coded all the important problems this time.</p>
<p>The result was clear, I solved 2 problems correctly for the first time in an interview scenario. The practice paid off, and I could not be more thankful to that awesome dude who opened my eyes. I did not care about the result now, since I had driven a point, I could actually do this.</p>
<h3 id="google-host-matching">Google host matching</h3>
<p>A few days after my Facebook interview, I got a call for a project at Google Seattle, involving, Kubernetes! I had been mentioning that I would love to work on Kubernetes, and I had even tried to implement a feature on it (since it is Open Source). I interviewed immediately, within one day of the email. They noticed that I have worked on it already (a big plus, I think), and asked me a couple of design questions. I think I knew I did well, when after I sketched my solution into words, I got a reply <em>“That’s actually how we do it in production”</em>.</p>
<p>This was a dream come true for me. And surely enough, I got a reply the very next working day that I would like to move ahead with an offer. I did not waste any time to say that I would too.</p>
<p>I finally had an offer from Google US!</p>
<h3 id="facebook-again">Facebook again?</h3>
<p>I do not know why I did not sign Google’s offer the day I got it. I was given 10 working days to sign it, that meant 20th of December. One fine day (12th December), I get a mail saying that I got into the 2nd and final round of interviews for Facebook London internships. I had no clue what to do now, and wished I had simply signed Google.</p>
<p>Here was Facebook London, known to offer return offers in London and Menlo Park. The other side, Google US. A higher pay, a confirmed and nice project, but it mostly offers a job in Google India to interns, a place I was not looking forward to joining. I spent the 2 days before my next interview, simply talking to people if leaving a confirmed offer at Google for Facebook would be a good choice.</p>
<p>I gave the final interview with <em>I’m gonna drop FB anyway</em> in mind. I had again coded some problems from the same book for preparation, and again managed to solve 2 problems, though this time around I had major hiccups, and barely solved the easy problem. Somehow managed in a very short time, the solution for the 2nd, and supposedly tough problem. I think I did make an impression when the interviewer asked me about some nice project I did, and I described the development, algorithm and motivation for <a href="https://github.com/pclubiitk/puppy-love">Puppy Love</a>.</p>
<p>This ensured that FB would haunt me the next few days.</p>
<h3 id="decision-making">Decision making</h3>
<p>Somehow, I spent the remaining days juggling between Facebook and Google. It so happened that I got promised that I would get Facebook’s decision by Tuesday, 20th, the same day I was supposed to sign Google, and the day of ICPC’s Chennai regional round. I would barely have a few hours to decide between Facebook and Google, if I got accepted.</p>
<p>I was advised to not weigh this too much at the moment, since if I got rejected, it would be a heartbreak. I quote myself:</p>
<blockquote>
<p>I would rather be counting my chickens before they hatch and be prepared, than be modest but unprepared</p>
</blockquote>
<p><br> I spent hours talking to people. I made a huge list of points comparing Google and Facebook, and Facebook somehow won there. Mostly because of my desire for a return offer abroad. I still shuffled around.</p>
<h3 id="the-final-day">The final day</h3>
<p>By the time the actual day came, I had settled on Facebook. I could bear a bad project, lesser pay, for long term benefits at Facebook.</p>
<p>ICPC was the least important thing to happen that day. I got away as soon as I could, and refreshed my Emails till 6:30 PM IST, but got nothing. I mailed my recruiter, and got a reply saying that a decision would be taken in a meeting about to start (in London), and I would know the result around 9 PM. This was bearable.</p>
<p>Come 9, 9:30, 10, 10:30, and yet, I did not hear back. I had decided I would drop Google if Facebook extended an offer to me, but for that, I needed an offer. I confirmed that I indeed had to sign my letter by midnight, and sent another mail to the Facebook recruiter, even sent her a message on Facebook. Not receiving a reply, I anxiously waited till much more than I had expected I would be willing.</p>
<p>It so happened, that she never got back to me. That night at least. I ended up signing Google at 11:45 PM, and congratulated myself on finally having an internship, assuming that I must have been rejected, and thus there was no rush to inform me.</p>
<p>It turned out the following morning, that I got a mail saying that Facebook has selected me for an internship! I could not believe this. This was early enough to mean that the decision must have been taken the previous working day. Of all the possibilities I had considered, reasons I had weighed for Facebook vs Google, all the interviews, the stress of the past 2 weeks, it all boiled down to a (possibly) sleeping or forgetful recruiter who did not get back to me the previous day. I do not know if the result was actually declared before midnight in India, when I signed my letter (6:30 PM GMT), but I assume that it would have been, since the meeting was scheduled for 2:00 PM GMT. In any case, the result did not get conveyed at the promised date / time.</p>
<h3 id="what-happened">What happened?</h3>
<p>I signed Google. It took multiple weird scenarios which built up to this day. As a friend quoted:</p>
<blockquote>
<p>Your internship at Google probably serves a much higher purpose</p>
</blockquote>
<p><br> I finally got back to pondering over the reasons I had loved my Google project, and felt happy about it. It was indeed a great opportunity, and I resolved to make it count.</p>
<p>Later that day, I got a call from a recruiter in London, describing my offer to me. I could not bear to hear it. I told her that there was some issue with my recruiter yesterday, and I have already signed Google. She arranged for my recruiter in India to call me, and I closed the offer. That’s it.</p>
<p>All the weeks of pondering over this decision finally got decided by a <em>sleeping recruiter</em>.</p>]]></description>
    <pubDate>Wed, 21 Dec 2016 00:00:00 UT</pubDate>
    <guid>https://sakshamsharma.com/2016/12/internsaga/index.html</guid>
    <dc:creator>Saksham Sharma</dc:creator>
</item>
<item>
    <title>Coding software-based mutex algos for fun</title>
    <link>https://sakshamsharma.com/2016/12/mutex/index.html</link>
    <description><![CDATA[<p>I learnt a couple of nice scheduling algorithms in my Operating Systems class last semester. They seemed like an interesting bunch, but it was not generally clear whether their performance would be good.</p>
<p>Now, what better a way to understand them than by coding them up? <!--more--> So it began.</p>
<p>First off, those who know about <a href="https://en.wikipedia.org/wiki/Global_interpreter_lock">GIL</a> would rather laugh at me when I tell you that I wrote the algorithms in Python.</p>
<blockquote>
<p>Multi-threading in Python? But Why ?!?!</p>
</blockquote>
<p>Simple reason, I was looking to write code fast. After all, I had an exam I hadn’t studied anything for (yes, this exam). Plus, I don’t know, but might be that GIL isn’t going to affect the output of this test significantly anyway (have not verified this yet).</p>
<p>So I went, and wrote a few classes (one for each algorithm):</p>
<h2 id="the-algorithms">The algorithms</h2>
<h3 id="dekkers-algorithm-2-thread">Dekker’s algorithm (2-thread)</h3>
<div class="sourceCode" id="cb1"><pre class="sourceCode python"><code class="sourceCode python"><a class="sourceLine" id="cb1-1" data-line-number="1"><span class="kw">class</span> Dekker:</a>
<a class="sourceLine" id="cb1-2" data-line-number="2">    <span class="kw">def</span> <span class="fu">__init__</span>(<span class="va">self</span>):</a>
<a class="sourceLine" id="cb1-3" data-line-number="3">        <span class="va">self</span>.flag <span class="op">=</span> [<span class="dv">0</span>, <span class="dv">0</span>]</a>
<a class="sourceLine" id="cb1-4" data-line-number="4">        <span class="va">self</span>.turn <span class="op">=</span> <span class="dv">0</span></a>
<a class="sourceLine" id="cb1-5" data-line-number="5"></a>
<a class="sourceLine" id="cb1-6" data-line-number="6">    <span class="kw">def</span> lock(<span class="va">self</span>, i):</a>
<a class="sourceLine" id="cb1-7" data-line-number="7">        j <span class="op">=</span> <span class="dv">1</span><span class="op">-</span>i</a>
<a class="sourceLine" id="cb1-8" data-line-number="8">        <span class="cf">while</span> <span class="va">self</span>.flag[j]:</a>
<a class="sourceLine" id="cb1-9" data-line-number="9">            <span class="cf">if</span> <span class="va">self</span>.turn <span class="op">==</span> j:</a>
<a class="sourceLine" id="cb1-10" data-line-number="10">                <span class="va">self</span>.flag[i] <span class="op">=</span> <span class="dv">0</span></a>
<a class="sourceLine" id="cb1-11" data-line-number="11">                <span class="cf">while</span> <span class="va">self</span>.turn <span class="op">==</span> j:</a>
<a class="sourceLine" id="cb1-12" data-line-number="12">                    <span class="cf">pass</span></a>
<a class="sourceLine" id="cb1-13" data-line-number="13">                <span class="va">self</span>.flag[i] <span class="op">=</span> <span class="dv">1</span></a>
<a class="sourceLine" id="cb1-14" data-line-number="14"></a>
<a class="sourceLine" id="cb1-15" data-line-number="15">    <span class="kw">def</span> unlock(<span class="va">self</span>, i):</a>
<a class="sourceLine" id="cb1-16" data-line-number="16">        j <span class="op">=</span> <span class="dv">1</span><span class="op">-</span>i</a>
<a class="sourceLine" id="cb1-17" data-line-number="17">        <span class="va">self</span>.turn <span class="op">=</span> j</a>
<a class="sourceLine" id="cb1-18" data-line-number="18">        <span class="va">self</span>.flag[i] <span class="op">=</span> <span class="dv">0</span></a></code></pre></div>
<h3 id="petersons-algorithm-2-thread">Peterson’s algorithm (2-thread)</h3>
<div class="sourceCode" id="cb2"><pre class="sourceCode python"><code class="sourceCode python"><a class="sourceLine" id="cb2-1" data-line-number="1">Peterson:</a>
<a class="sourceLine" id="cb2-2" data-line-number="2">    <span class="kw">def</span> <span class="fu">__init__</span>(<span class="va">self</span>):</a>
<a class="sourceLine" id="cb2-3" data-line-number="3">        <span class="va">self</span>.flag <span class="op">=</span> [<span class="dv">0</span>, <span class="dv">0</span>]</a>
<a class="sourceLine" id="cb2-4" data-line-number="4">        <span class="va">self</span>.turn <span class="op">=</span> <span class="dv">0</span></a>
<a class="sourceLine" id="cb2-5" data-line-number="5"></a>
<a class="sourceLine" id="cb2-6" data-line-number="6">    <span class="kw">def</span> lock(<span class="va">self</span>, i):</a>
<a class="sourceLine" id="cb2-7" data-line-number="7">        j <span class="op">=</span> <span class="dv">1</span><span class="op">-</span>i</a>
<a class="sourceLine" id="cb2-8" data-line-number="8">        <span class="va">self</span>.flag[i] <span class="op">=</span> <span class="dv">1</span></a>
<a class="sourceLine" id="cb2-9" data-line-number="9">        <span class="va">self</span>.turn <span class="op">=</span> j</a>
<a class="sourceLine" id="cb2-10" data-line-number="10">        <span class="cf">while</span> <span class="va">self</span>.flag[j] <span class="kw">and</span> <span class="va">self</span>.turn <span class="op">==</span> j:</a>
<a class="sourceLine" id="cb2-11" data-line-number="11">            <span class="cf">pass</span></a>
<a class="sourceLine" id="cb2-12" data-line-number="12"></a>
<a class="sourceLine" id="cb2-13" data-line-number="13">    <span class="kw">def</span> unlock(<span class="va">self</span>, i):</a>
<a class="sourceLine" id="cb2-14" data-line-number="14">        <span class="va">self</span>.flag[i] <span class="op">=</span> <span class="dv">0</span></a></code></pre></div>
<h3 id="lamports-bakery-algorithm-n-thread">Lamport’s bakery algorithm (n-thread)</h3>
<div class="sourceCode" id="cb3"><pre class="sourceCode python"><code class="sourceCode python"><a class="sourceLine" id="cb3-1" data-line-number="1"><span class="kw">class</span> Lamport:</a>
<a class="sourceLine" id="cb3-2" data-line-number="2">    <span class="kw">def</span> <span class="fu">__init__</span>(<span class="va">self</span>, c):</a>
<a class="sourceLine" id="cb3-3" data-line-number="3">        <span class="va">self</span>.count <span class="op">=</span> c</a>
<a class="sourceLine" id="cb3-4" data-line-number="4">        <span class="va">self</span>.ticket <span class="op">=</span> [<span class="dv">0</span>]<span class="op">*</span>c</a>
<a class="sourceLine" id="cb3-5" data-line-number="5">        <span class="va">self</span>.choosing <span class="op">=</span> [<span class="dv">0</span>]<span class="op">*</span>c</a>
<a class="sourceLine" id="cb3-6" data-line-number="6"></a>
<a class="sourceLine" id="cb3-7" data-line-number="7">    <span class="kw">def</span> lock(<span class="va">self</span>, i):</a>
<a class="sourceLine" id="cb3-8" data-line-number="8">        <span class="va">self</span>.choosing[i] <span class="op">=</span> <span class="dv">1</span></a>
<a class="sourceLine" id="cb3-9" data-line-number="9">        <span class="va">self</span>.ticket[i] <span class="op">=</span> <span class="bu">max</span>(<span class="va">self</span>.ticket) <span class="op">+</span> <span class="dv">1</span></a>
<a class="sourceLine" id="cb3-10" data-line-number="10">        <span class="va">self</span>.choosing[i] <span class="op">=</span> <span class="dv">0</span></a>
<a class="sourceLine" id="cb3-11" data-line-number="11">        <span class="cf">for</span> j <span class="kw">in</span> <span class="bu">range</span>(<span class="dv">0</span>, <span class="va">self</span>.count):</a>
<a class="sourceLine" id="cb3-12" data-line-number="12">            <span class="cf">while</span> <span class="va">self</span>.choosing[j]:</a>
<a class="sourceLine" id="cb3-13" data-line-number="13">                <span class="cf">pass</span></a>
<a class="sourceLine" id="cb3-14" data-line-number="14">            <span class="cf">while</span> (<span class="va">self</span>.ticket[j] <span class="kw">and</span></a>
<a class="sourceLine" id="cb3-15" data-line-number="15">                   (<span class="va">self</span>.ticket[j], j) <span class="op">&lt;</span> (<span class="va">self</span>.ticket[i], i)):</a>
<a class="sourceLine" id="cb3-16" data-line-number="16">                <span class="cf">pass</span></a>
<a class="sourceLine" id="cb3-17" data-line-number="17"></a>
<a class="sourceLine" id="cb3-18" data-line-number="18">    <span class="kw">def</span> unlock(<span class="va">self</span>, i):</a>
<a class="sourceLine" id="cb3-19" data-line-number="19">        <span class="va">self</span>.ticket[i] <span class="op">=</span> <span class="dv">0</span></a></code></pre></div>
<h2 id="testing-how">Testing, how?</h2>
<p>So I made a simple function. It would grab the lock, increment the thread’s counter (globally placed), print the new total count for all threads, and release the lock.</p>
<p>I wrote some clever python idioms, but that’s irrelevant. What is relevant is the rate at which the counter increases for each thread. That could be throught of as a metric to quantify the performance of the algorithms.</p>
<h2 id="results">Results</h2>
<p>I ran each algorithm for 5 seconds, and looked at the count of iterations of each process. Also, to note the presence of unfairness, or an initial bias, I also ran one for 10 seconds, but it did not have any noticeable effect. Also, since Dekker and Peterson only work for 2 threads, I also tested Lamport on 2 threads (highly unfair, I know).</p>
<table>
<thead>
<tr class="header">
<th></th>
<th>Thread 1</th>
<th>Thread 2</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>Dekker</td>
<td>7415</td>
<td>7245</td>
</tr>
<tr class="even">
<td>Peterson</td>
<td>116</td>
<td>114</td>
</tr>
<tr class="odd">
<td>Lamport</td>
<td>119</td>
<td>117</td>
</tr>
</tbody>
</table>
<p>Through this, it is quite clear who the winner is. Dekker seems to perform much faster than the other 2. Of course, it has the other issues of being more complicated, and of only supporting 2 threads. But the huge performance gap is no doubt remarkable.</p>
<p>This experiment was never intended to be of very high accuracy; why, it was hardly more than an exam time fun exercise. But a difference of this magnitude is certainly of interest, and what an in-depth look at the algorithms reveals, not completely unexpected.</p>]]></description>
    <pubDate>Fri, 02 Dec 2016 00:00:00 UT</pubDate>
    <guid>https://sakshamsharma.com/2016/12/mutex/index.html</guid>
    <dc:creator>Saksham Sharma</dc:creator>
</item>
<item>
    <title>Zero-trust - Safe and anonymous ANDing bits - Part 2</title>
    <link>https://sakshamsharma.com/2016/11/puppy2/index.html</link>
    <description><![CDATA[<h3 id="recap">Recap</h3>
<p>For those who haven’t read the <a href="/2016/10/puppy1/">previous post</a>, this is a challenge which came up while trying to develop a secure version of a platform called <em>Puppy Love</em>. The introduction and the algorithmic challenge, taken from the previous article:</p>
<!--more-->
<p>The queerly named <em>Puppy Love</em> platform has been running in my university since 2014, meant to help shy nerds meet their crush, made my the Programming Club (of which, I happen to be the current coordinator). The platform opens 1 week prior to the Valentine’s Day every year, and let’s people choose up to 4 of their crushes, encrypting their choices with their password. At the stroke of the midnight hour, everyone logs back, and their choices are decrypted, and are then matched to other people’s choices. Only the people who matched are informed about it. If your <em>love</em> was unrequited (the other person didn’t like you), you will not get to know. More importantly, if you did not like the other person, you would not know if that person liked you or not.</p>
<p>The above seemed like a very rosy thing, till people began to find flaws. Some of the issues were with the code, and nothing too serious. But as would have, people began to get doubtful about the trust worthiness of the server admins. This year, being my turn to face the onslaught of accusations of looking at people’s choices, I, with Vinayak Tantia, a friend and fellow Coordinator, came up with a much improved algorithm to implement the same thing.</p>
<p>Here’s the biggest issue with such a platform:</p>
<blockquote>
<p>You do NOT trust me when I say my code on the server is NOT seeing your choices</p>
</blockquote>
<p>What is required is, how I call it, a <code>zero-server-trust</code> based algorithm. Regardless of what code is running on the server, the client should be able to prove that any information it sends to the server shall not reveal any information about the client’s choices.</p>
<h3 id="possible-algorithms">Possible algorithms</h3>
<p>We basically need a way to compute the <code>AND</code> of two bit values residing on two hosts (call them Alice and Bob), in the presence of a central server named Eve.</p>
<ul>
<li>One simple way is for Alice and Bob to share their bits to Eve, and trust Eve to not store the bits for the eyes of the admin of Eve, and only compute the AND of the bits, and send the AND value back to Alice and Bob. This is simple, but requires you to trust the server to not look at your choices. In case of naming your crushes, this is certainly not an option.</li>
<li>Use <a href="https://en.wikipedia.org/wiki/Garbled_circuit">Garbled Circuit</a> technique, along with <a href="https://en.wikipedia.org/wiki/Oblivious_transfer">Oblivious Transfer</a>, but modified to keep the last step on the central server. This technique is quite complicated at first, but has a major drawback. There is no guarantee of secrecy of choices if one party does not play by the protocol and cheats instead. This would be outlined in a future article.</li>
</ul>
<p>The second solution is promising, but can possibly be exploited to reveal the choice of the other party without them knowing your choice. What is required to prevent that attack is randomness in the case where a party is not interested. We outline the new algorithm in the next section.</p>
<h3 id="shared-knowledge-based-expected-result-algorithm">Shared knowledge based expected-result algorithm</h3>
<p><strong>Note</strong>: Some part of this algorithm was later found to be redundant, and removed. The algorithm is still of interest theoretically.</p>
<p>As a preface, I did read a couple of papers on this topic, but did not find a fair, secure and practical solution. This particular algorithm solves a weaker problem than most papers I found, which is: Computing AND of 2 secret bits in presence of an honest-but-curious server. This algorithm was designed originally as a modification of the one based on garbled circuits after I came to know of the violation of secrecy in that, and has been significantly simplied since then. Onto:</p>
<ul>
<li>Both parties have shared secret values A and B. These are not known to Eve by virtue of public key encryption.</li>
<li>Parties agree to this protocol:
<ul>
<li>Alice sends value <code>a = A</code> to Eve if she likes Bob.</li>
<li>Alice sends value <code>a = random</code> to Eve if she does not like Bob.</li>
<li>Bob sends value <code>b = B</code> to Eve if he likes Alice.</li>
<li>Bob sends value <code>b = random</code> to Eve if he does not like Alice.</li>
</ul></li>
<li>Eve receives <code>a</code> and <code>b</code>. She stores <code>hash(a*b)</code> as result.</li>
<li>Alice and Bob manually compute <code>hash(A * B)</code>, and send it to server (server can verify malicious behavior if they don’t match)</li>
<li>It is a match only if the result and the expected value by both parties are the same.</li>
</ul>
<h3 id="a-few-comments-about-the-safety-of-the-protocol">A few comments about the safety of the protocol</h3>
<p>I do plan to formally prove this soon enough, but till then, here are some thoughts.</p>
<ul>
<li>Hash is not invertible. So if there was no match, Alice can not invert the result to get Bob’s sent value.</li>
<li>The hashing step needs to be secure against brute force attacks, especially because each party already knows one multiplicative factor of the number hashed. Either the values of A and B need to be very large (experiments/data needed), or the hash function has to be very slow computationally (preventing inversion by computational bottleneck).</li>
<li>Selecting random, and different values for A and B is important because Eve should not be able to see whether the values sent by Alice and Bob are same or different, and thus infer whether they matched or not.</li>
<li>The protocol itself is fully symmetric. Both Alice and Bob execute the exact same steps, regardless of who starts the protocol.</li>
<li>If Alice did not send A, she has no way of knowing whether Bob sent B or not, since the hash cannot be inverted (theoretically). The same is true for Bob.</li>
<li>The server does come to know the result of the computation here. But it should be possible to generalize. More on it later.</li>
</ul>
<h3 id="conclusion">Conclusion</h3>
<p>This algorithm is very simple to say the least, and seems secure to me. A formal proof ought to confirm this as well, though that is untrodden territory for me as of now. Do let me know in the comments or on email if something like this (fair and anonymous AND of bits) has been done before, or if you find a bug in this algorithm (if it is so, I cannot stress how important it is for me to know).</p>]]></description>
    <pubDate>Fri, 25 Nov 2016 00:00:00 UT</pubDate>
    <guid>https://sakshamsharma.com/2016/11/puppy2/index.html</guid>
    <dc:creator>Saksham Sharma</dc:creator>
</item>
<item>
    <title>ZSH globbing to play music</title>
    <link>https://sakshamsharma.com/2016/10/cliplay/index.html</link>
    <description><![CDATA[<p>Too lazy to learn to use the awesome <a href="https://cmus.github.io/">cmus</a>, and living on an (very regrettably) extremely unorganized music library since I came to IIT Kanpur, yeah that’s me these days when it comes to music. Without the likes of Spotify in India, I’ve been living on YouTube since more than 2 years, when I used to have a fully organized music library back in my school days.</p>
<p>Having a very dynamic (and mostly incomplete) music library, I was constantly being annoyed having to import folders, sort some, organize others. What would be ideal in such a scenario is a way to live in the shell itself, but have the freedom to easily search for music files and play them. <!--more--></p>
<p>If you’re not familiar with pattern globbing, fire up ZSH and try this:</p>
<pre><code>cd Pictures
ls **/*.jpg</code></pre>
<p>Nice right? The <code>**</code> stands for recursive searching. So it will go and search recursively in all subfolders of the current directory.</p>
<h3 id="zsh-play">zsh-play</h3>
<p>I envisioned an interface of this sort:</p>
<pre><code>play river flows</code></pre>
<p>This ought to open all songs containing the words <em>river</em> and <em>flows</em> in their name, in this particular order, regardless of the case of the spellings. Also, it shouldn’t be matching all kinds of files, so I added a <code>-t</code> flag, to decide the file type, set to <code>mp3</code> by default, but something like <code>-t flac</code> works as well.</p>
<h3 id="how-to">How to?</h3>
<p>The code was short enough. I added a new ZSH function in my ZSH configuration, and voila! In reality though, it took me a great while to make it work, because I did not know (sounds obvious in hindsight as always) that globs (The useful <code>*</code>s) are not expanded when coming from a string variable in the shell. And why should they?</p>
<p>You can pick the code from the end of this article, and use it by putting it in your .zshrc and sourcing it. Voila!</p>
<h3 id="lessons">Lessons</h3>
<ul>
<li>Globs aren’t expanded from strings. Don’t hope to put strings containing <code>*</code>s in a command, and expect it to expand. Use <code>{~var}</code> instead.</li>
<li>Functions in ZSH are quite powerful! Better use them instead of writing aliases and small scripts.</li>
<li><code>getopts</code> and <code>OPTARGS</code> is a really nice way to implement CLI arguments!</li>
<li>You need <code>setopt extendedglob</code> for some globbing to work.</li>
<li>Case insensitive matching of globs uses <code>(#i)</code>.</li>
<li>You can generate array of names of files very easily with <code>list=(**/*.mp3)</code> kind of syntax.</li>
</ul>
<h3 id="the-code">The code:</h3>
<div class="sourceCode" id="cb3"><pre class="sourceCode bash"><code class="sourceCode bash"><a class="sourceLine" id="cb3-1" data-line-number="1"><span class="kw">function</span><span class="fu"> play()</span> <span class="kw">{</span></a>
<a class="sourceLine" id="cb3-2" data-line-number="2">    <span class="va">EXT=</span><span class="st">&quot;mp3&quot;</span></a>
<a class="sourceLine" id="cb3-3" data-line-number="3">    <span class="kw">while</span> <span class="bu">getopts</span> <span class="st">&quot;ht:r:p:v&quot;</span> OPTION</a>
<a class="sourceLine" id="cb3-4" data-line-number="4">    <span class="kw">do</span></a>
<a class="sourceLine" id="cb3-5" data-line-number="5">        <span class="kw">case</span> <span class="va">$OPTION</span><span class="kw"> in</span></a>
<a class="sourceLine" id="cb3-6" data-line-number="6">            t<span class="kw">)</span></a>
<a class="sourceLine" id="cb3-7" data-line-number="7">                <span class="va">EXT=$OPTARG</span></a>
<a class="sourceLine" id="cb3-8" data-line-number="8">                <span class="bu">echo</span> <span class="st">&quot;</span><span class="va">$EXT</span><span class="st"> extension&quot;</span></a>
<a class="sourceLine" id="cb3-9" data-line-number="9">                <span class="bu">shift</span> 2</a>
<a class="sourceLine" id="cb3-10" data-line-number="10">                <span class="kw">;;</span></a>
<a class="sourceLine" id="cb3-11" data-line-number="11">            ?<span class="kw">)</span></a>
<a class="sourceLine" id="cb3-12" data-line-number="12">            <span class="ex">usage</span></a>
<a class="sourceLine" id="cb3-13" data-line-number="13">            <span class="kw">;;</span></a>
<a class="sourceLine" id="cb3-14" data-line-number="14">        <span class="kw">esac</span></a>
<a class="sourceLine" id="cb3-15" data-line-number="15">    <span class="kw">done</span></a>
<a class="sourceLine" id="cb3-16" data-line-number="16"></a>
<a class="sourceLine" id="cb3-17" data-line-number="17">    <span class="ex">setopt</span> extendedglob</a>
<a class="sourceLine" id="cb3-18" data-line-number="18">    <span class="va">pat=$(</span><span class="bu">echo</span> -n <span class="st">&quot;</span><span class="va">$@</span><span class="st">&quot;</span> <span class="kw">|</span> <span class="fu">sed</span> -E <span class="st">&#39;s/\s+/\*/g&#39;</span><span class="va">)</span></a>
<a class="sourceLine" id="cb3-19" data-line-number="19">    <span class="va">list=(</span>(#i<span class="va">)</span>**/*$<span class="dt">{~pat}*.${EXT}</span>)</a>
<a class="sourceLine" id="cb3-20" data-line-number="20">    <span class="ex">vlc</span> <span class="va">$list</span></a>
<a class="sourceLine" id="cb3-21" data-line-number="21"><span class="kw">}</span></a></code></pre></div>]]></description>
    <pubDate>Sat, 29 Oct 2016 00:00:00 UT</pubDate>
    <guid>https://sakshamsharma.com/2016/10/cliplay/index.html</guid>
    <dc:creator>Saksham Sharma</dc:creator>
</item>
<item>
    <title>Anonymous, zero-server-trust couple matching - Part 1</title>
    <link>https://sakshamsharma.com/2016/10/puppy1/index.html</link>
    <description><![CDATA[<p><strong>NOTE:</strong>: The algorithm used has been re-worked, and changed since this article was written. Expect a new article with the formal algorithm soon :)</p>
<p><strong>Update</strong>: The new article with the latest algorithm is <a href="/2016/11/puppy2">here on my blog</a>. Do read that article as a follow up!</p>
<p>The queerly named <em>Puppy Love</em> platform has been running in my university since 2014, meant to help shy nerds meet their crush, made my the Programming Club (of which, I happen to be the current coordinator)<!--more-->.The platform opens 1 week prior to the Valentine’s Day every year, and let’s people choose up to 4 of their crushes, encrypting their choices with their password. At the stroke of the midnight hour, everyone logs back, and their choices are decrypted, and are then matched to other people’s choices. Only the people who matched are informed about it. If your <em>love</em> was unrequited (the other person didn’t like you), you will not get to know. More importantly, if you did not like the other person, you would not know if that person liked you or not.</p>
<p>The above seemed like a very rosy thing, till people began to find flaws. Some of the issues were with the code, and nothing too serious. But as would have, people began to get doubtful about the trust worthiness of the server admins. This year, being my turn to face the onslaught of accusations of looking at people’s choices, I, with Vinayak Tantia, a friend and fellow Coordinator, came up with a much improved algorithm to implement the same thing.</p>
<p>Here’s the biggest issue with such a platform:</p>
<blockquote>
<p>You do NOT trust me when I say my code on the server is NOT seeing your choices</p>
</blockquote>
<p><br> What is required is, how I call it, a <code>zero-server-trust</code> based algorithm. Regardless of what code is running on the server, the client should be able to prove that any information it sends to the server shall not reveal any information about the client’s choices.</p>
<h3 id="the-algorithm">The algorithm</h3>
<h4 id="email-based-initial-auth">Email based initial auth</h4>
<p>Instead of using the campus FTP or proxy based logins, which would have required you to send your password to the server (thus requiring trust), we send an initial email to the person’s official IIT Kanpur email address, and let the person create a password. The password’s hash is sent to the server for storage. The hash will be used for future logins, and thus the plain password never leaves the client.</p>
<h4 id="public-private-keys">Public Private Keys</h4>
<p>On the initial password creating, we also create a new public-private keypair on the client itself. The private key is then encrypted with the plaintext password of the user. The plaintext public key and the encrypted private key are then kept on the server.</p>
<h4 id="the-usage">The usage</h4>
<p>The user is allowed to query for people and add them to his tentative list of likes. The queries are routed to the IIT Kanpur internal student search, and thus the server cannot be logging the client’s requests. These choices are saved in a string, which has a few random bytes in the start. This string is encrypted with the private key, and sent to the server for storage and later retrieval. The random string is added to ensure that the server cannot deduce addition or removal of choices. Thus, whether the choices were changed or not, there shall be a change in the encrypted data.</p>
<h4 id="submission">Submission</h4>
<p>Finally, when the user is ready to lock his choices, the client fetches the public keys of all the students on campus. This data should be the order of magnitude of a few mega bytes. The client encodes its preference (a boolean) in a string (described later) for each student on the campus, and sends these strings back to the server for storage. Each string is encrypted with the public key of the intended recepient, and thus they are meaningless for the server.</p>
<h4 id="matching">Matching</h4>
<p><strong>Note</strong>: This section is deprecated in favor of the algorithm described in the <a href="/2016/11/puppy2">follow up post</a>.</p>
<p>The most tricky part. How does the server match two people, without knowing any of their choices? Turns out, there’s something called Homomorphic computation, which is intended for this very purpose. Here’s a motivating example:</p>
<p><br /><span class="math display">$$
m_1^{e} \times m_2^{e} = (m_1 \times m_2)^{e}\\
((m_1 \times m_2)^{e})^{d} = (m_1 \times m_2)
$$</span><br /></p>
<p>So basically, the server could compute the product of <span class="math inline"><em>m</em><sub>1</sub></span> and <span class="math inline"><em>m</em><sub>2</sub></span>, and convey the result to both the parties. They could separately get back the value of <span class="math inline"><em>m</em><sub>1</sub> × <em>m</em><sub>2</sub></span>, without the server ever coming to know the product. All this requires is a shared public private key pair between every two people on the campus.</p>
<p>Of course, we’re not going to be using product, since a product has enough information to get the other person’s response. What is required is a message of the sort such that it encodes the choice, but can not be inverted to get the choice. Only when it is used with another message containing a positive choice is it possible to get any information out of the message.</p>
<p><strong>Update</strong>: The above technique means that if the database is compromised, any person can take the other person’s response, forge a new response from his side, and see what choices were filled. To disallow this, the algorithm needs to be changed into a two-step method (both people share their choice in the form of two messages), where the second message is dependent on the first message of the other person. We are still working on deciding the exact form to be taken.</p>
<h4 id="server-requirements">Server requirements</h4>
<p>There shall be a large number of entries in the database. For each pair of people, there shall be one entry in the database storing their messages, and their shared secret. The server is only expected to be providing the service it is claiming to provide, that is, letting people match. Thus, we only assume that the server shall not be trying to jeopardize the whole matching game by not playing its part. At no point is the server expected to maintain any level of trust.</p>
<h3 id="conclusion">Conclusion</h3>
<p>The project is being written using Node and JavaScript, and the source code is publicly available on <a href="https://github.com/pclubiitk/puppy-love">Github here</a>. We hope to finish it within a month, considering that the semester is on.</p>
<script type="text/x-mathjax-config">
MathJax.Hub.Config({
  tex2jax: {inlineMath: [['$','$'], ['\\(','\\)']]}
});
</script>
<script type="text/javascript" async
  src="https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.1/MathJax.js?config=TeX-MML-AM_CHTML">
</script>]]></description>
    <pubDate>Tue, 25 Oct 2016 00:00:00 UT</pubDate>
    <guid>https://sakshamsharma.com/2016/10/puppy1/index.html</guid>
    <dc:creator>Saksham Sharma</dc:creator>
</item>

    </channel>
</rss>
